
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000289e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000289e  00002932  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800082  00800082  00002954  2**0
                  ALLOC
  3 .stab         000027d8  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000108f  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000061bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000646b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a907  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4d 14 	jmp	0x289a	; 0x289a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

Password_ConfigType PassWord_Configuration_CTRL;
Password_EEPROM_ConfigType PassWord_Configuration_EEPROM;
uint8 error_counter;
/*-------------------------Function Definitions-------------------------*/
int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
	Init_Fun();
     b52:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Init_Fun>
	RecievePassword(&PassWord_Configuration_CTRL);
     b56:	82 e9       	ldi	r24, 0x92	; 146
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 1b 06 	call	0xc36	; 0xc36 <RecievePassword>

	/*ShowPassword(&PassWord_Configuration_CTRL);*/

	SavePassword_EEPROM(&PassWord_Configuration_CTRL);
     b5e:	82 e9       	ldi	r24, 0x92	; 146
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 72 06 	call	0xce4	; 0xce4 <SavePassword_EEPROM>
	ReadPassword_EEPROM( Begining_Address, &PassWord_Configuration_EEPROM);
     b66:	28 e8       	ldi	r18, 0x88	; 136
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	81 e1       	ldi	r24, 0x11	; 17
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	b9 01       	movw	r22, r18
     b70:	0e 94 15 07 	call	0xe2a	; 0xe2a <ReadPassword_EEPROM>

	while (1) {

		uint8 rec_data = Recieve_Option_Select();
     b74:	0e 94 2c 08 	call	0x1058	; 0x1058 <Recieve_Option_Select>
     b78:	8b 83       	std	Y+3, r24	; 0x03

		if (rec_data == CHANGE_PW) {
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	87 30       	cpi	r24, 0x07	; 7
     b7e:	f9 f4       	brne	.+62     	; 0xbbe <main+0x78>


			/*Get the Password entered by the user*/
			Entered_PW_ECU2(&PassWord_Configuration_EEPROM);
     b80:	88 e8       	ldi	r24, 0x88	; 136
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 05 08 	call	0x100a	; 0x100a <Entered_PW_ECU2>


			/*Check on the Password , is that same to the one in EEPROM ?*/
			uint8 check_status = CheckPassword(&PassWord_Configuration_EEPROM);
     b88:	88 e8       	ldi	r24, 0x88	; 136
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CheckPassword>
     b90:	8a 83       	std	Y+2, r24	; 0x02

			/*Send to the HMI Is that password is Right or Wrong */
			UART_sendByte(check_status);
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	0e 94 3f 13 	call	0x267e	; 0x267e <UART_sendByte>

			if (check_status == TRUE) {
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	59 f7       	brne	.-42     	; 0xb74 <main+0x2e>

				/*If the Password is right */
				RecievePassword(&PassWord_Configuration_CTRL);
     b9e:	82 e9       	ldi	r24, 0x92	; 146
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 1b 06 	call	0xc36	; 0xc36 <RecievePassword>
				SavePassword_EEPROM(&PassWord_Configuration_CTRL);
     ba6:	82 e9       	ldi	r24, 0x92	; 146
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 72 06 	call	0xce4	; 0xce4 <SavePassword_EEPROM>
				ReadPassword_EEPROM( Begining_Address,
     bae:	28 e8       	ldi	r18, 0x88	; 136
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e1       	ldi	r24, 0x11	; 17
     bb4:	93 e0       	ldi	r25, 0x03	; 3
     bb6:	b9 01       	movw	r22, r18
     bb8:	0e 94 15 07 	call	0xe2a	; 0xe2a <ReadPassword_EEPROM>
     bbc:	db cf       	rjmp	.-74     	; 0xb74 <main+0x2e>
			}


		}

		else if (rec_data == OPEN_DOOR) {
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	80 31       	cpi	r24, 0x10	; 16
     bc2:	c1 f6       	brne	.-80     	; 0xb74 <main+0x2e>
			/*Get the Password entered by the user*/
			Entered_PW_ECU2(&PassWord_Configuration_EEPROM);
     bc4:	88 e8       	ldi	r24, 0x88	; 136
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 05 08 	call	0x100a	; 0x100a <Entered_PW_ECU2>

			/*Check on the Password , is that same to the one in EEPROM ?*/
			uint8 check_status = CheckPassword(&PassWord_Configuration_EEPROM);
     bcc:	88 e8       	ldi	r24, 0x88	; 136
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 d5 07 	call	0xfaa	; 0xfaa <CheckPassword>
     bd4:	89 83       	std	Y+1, r24	; 0x01

			/*Send to the HMI Is that password is Right or Wrong */
			UART_sendByte(check_status);
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	0e 94 3f 13 	call	0x267e	; 0x267e <UART_sendByte>

			if (check_status == TRUE) {
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	49 f6       	brne	.-110    	; 0xb74 <main+0x2e>
				Control_door(OPEN_CLOSE_TIME, WAIT_TIME);
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	65 e0       	ldi	r22, 0x05	; 5
     be6:	0e 94 35 08 	call	0x106a	; 0x106a <Control_door>

				/*Send to the HMI ECU That the Motor
				 * finished its work*/
				UART_sendByte(TRUE);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	0e 94 3f 13 	call	0x267e	; 0x267e <UART_sendByte>
     bf0:	c1 cf       	rjmp	.-126    	; 0xb74 <main+0x2e>

00000bf2 <Init_Fun>:
 *            - Initiate EEPROM
 *            - Initiate UART
 *            - Set Motors pin as OUTPUT pins
 ************************************************************************************/

void Init_Fun(void) {
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1 << 7);
     bfa:	af e5       	ldi	r26, 0x5F	; 95
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	ef e5       	ldi	r30, 0x5F	; 95
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	8c 93       	st	X, r24
	LCD_init();
     c08:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_init>
	UART_init();
     c0c:	0e 94 25 13 	call	0x264a	; 0x264a <UART_init>
	EEPROM_init();
     c10:	0e 94 85 08 	call	0x110a	; 0x110a <EEPROM_init>
	SET_BIT(MOTOR_DDRX, MOTOR_PIN_1);
     c14:	a1 e3       	ldi	r26, 0x31	; 49
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e1 e3       	ldi	r30, 0x31	; 49
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	8c 93       	st	X, r24
	SET_BIT(MOTOR_DDRX, MOTOR_PIN_2);
     c22:	a1 e3       	ldi	r26, 0x31	; 49
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e1 e3       	ldi	r30, 0x31	; 49
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 68       	ori	r24, 0x80	; 128
     c2e:	8c 93       	st	X, r24
}
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <RecievePassword>:
 * Parameters (in): Password_ConfigType * Password_Config
 * Return value: void
 * Description: Read Password From the UART and Write it in a Structure member
 ************************************************************************************/

void RecievePassword(Password_ConfigType * Password_Config) {
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <RecievePassword+0xa>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <RecievePassword+0x36>
		Password_Config->PW[Counter] = UART_recieveByte();
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	08 2f       	mov	r16, r24
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_recieveByte>
     c58:	28 2f       	mov	r18, r24
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	fc 01       	movw	r30, r24
     c60:	e0 0f       	add	r30, r16
     c62:	f1 1f       	adc	r31, r17
     c64:	20 83       	st	Z, r18
 * Description: Read Password From the UART and Write it in a Structure member
 ************************************************************************************/

void RecievePassword(Password_ConfigType * Password_Config) {

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	85 30       	cpi	r24, 0x05	; 5
     c70:	70 f3       	brcs	.-36     	; 0xc4e <RecievePassword+0x18>
		Password_Config->PW[Counter] = UART_recieveByte();

	}

}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	08 95       	ret

00000c82 <ShowPassword>:
 * Parameters (in): Password_ConfigType * Password_Config
 * Return value: void
 * Description: Wrtie The password from the structure and Display it on LCD
 ************************************************************************************/

void ShowPassword(Password_ConfigType * Password_Config) {
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	00 d0       	rcall	.+0      	; 0xc88 <ShowPassword+0x6>
     c88:	0f 92       	push	r0
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9b 83       	std	Y+3, r25	; 0x03
     c90:	8a 83       	std	Y+2, r24	; 0x02
	LCD_clearScreen();
     c92:	0e 94 ae 12 	call	0x255c	; 0x255c <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_goToRowColumn>
	LCD_displayString("Password is");
     c9e:	80 e6       	ldi	r24, 0x60	; 96
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_goToRowColumn>
	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     cae:	19 82       	std	Y+1, r1	; 0x01
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <ShowPassword+0x50>
		LCD_intgerToString(Password_Config->PW[Counter]);
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	fc 01       	movw	r30, r24
     cbe:	e2 0f       	add	r30, r18
     cc0:	f3 1f       	adc	r31, r19
     cc2:	80 81       	ld	r24, Z
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_intgerToString>
void ShowPassword(Password_ConfigType * Password_Config) {
	LCD_clearScreen();
	LCD_goToRowColumn(0, 0);
	LCD_displayString("Password is");
	LCD_goToRowColumn(1, 0);
	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	85 30       	cpi	r24, 0x05	; 5
     cd6:	68 f3       	brcs	.-38     	; 0xcb2 <ShowPassword+0x30>
	 * Function Name: SavePassword_EEPROM
	 * Parameters (in): Password_ConfigType * Password_Config
	 * Return value: void
	 * Description: Save Password in The EEPROM
	 ************************************************************************************/
}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <SavePassword_EEPROM>:

void SavePassword_EEPROM(Password_ConfigType * Password_Config) {
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	61 97       	sbiw	r28, 0x11	; 17
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	99 8b       	std	Y+17, r25	; 0x11
     cfa:	88 8b       	std	Y+16, r24	; 0x10

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     cfc:	1f 86       	std	Y+15, r1	; 0x0f
     cfe:	88 c0       	rjmp	.+272    	; 0xe10 <SavePassword_EEPROM+0x12c>

		EEPROM_writeByte(Begining_Address + Counter,
     d00:	8f 85       	ldd	r24, Y+15	; 0x0f
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	8f 5e       	subi	r24, 0xEF	; 239
     d08:	9c 4f       	sbci	r25, 0xFC	; 252
     d0a:	ac 01       	movw	r20, r24
     d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	88 89       	ldd	r24, Y+16	; 0x10
     d14:	99 89       	ldd	r25, Y+17	; 0x11
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	20 81       	ld	r18, Z
     d1e:	ca 01       	movw	r24, r20
     d20:	62 2f       	mov	r22, r18
     d22:	0e 94 8e 08 	call	0x111c	; 0x111c <EEPROM_writeByte>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e2       	ldi	r26, 0x20	; 32
     d2c:	b1 e4       	ldi	r27, 0x41	; 65
     d2e:	8b 87       	std	Y+11, r24	; 0x0b
     d30:	9c 87       	std	Y+12, r25	; 0x0c
     d32:	ad 87       	std	Y+13, r26	; 0x0d
     d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d36:	6b 85       	ldd	r22, Y+11	; 0x0b
     d38:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	4a ef       	ldi	r20, 0xFA	; 250
     d44:	54 e4       	ldi	r21, 0x44	; 68
     d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8f 83       	std	Y+7, r24	; 0x07
     d50:	98 87       	std	Y+8, r25	; 0x08
     d52:	a9 87       	std	Y+9, r26	; 0x09
     d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d56:	6f 81       	ldd	r22, Y+7	; 0x07
     d58:	78 85       	ldd	r23, Y+8	; 0x08
     d5a:	89 85       	ldd	r24, Y+9	; 0x09
     d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e8       	ldi	r20, 0x80	; 128
     d64:	5f e3       	ldi	r21, 0x3F	; 63
     d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	2c f4       	brge	.+10     	; 0xd78 <SavePassword_EEPROM+0x94>
		__ticks = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
     d76:	3f c0       	rjmp	.+126    	; 0xdf6 <SavePassword_EEPROM+0x112>
	else if (__tmp > 65535)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	3f ef       	ldi	r19, 0xFF	; 255
     d84:	4f e7       	ldi	r20, 0x7F	; 127
     d86:	57 e4       	ldi	r21, 0x47	; 71
     d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8c:	18 16       	cp	r1, r24
     d8e:	4c f5       	brge	.+82     	; 0xde2 <SavePassword_EEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d90:	6b 85       	ldd	r22, Y+11	; 0x0b
     d92:	7c 85       	ldd	r23, Y+12	; 0x0c
     d94:	8d 85       	ldd	r24, Y+13	; 0x0d
     d96:	9e 85       	ldd	r25, Y+14	; 0x0e
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e2       	ldi	r20, 0x20	; 32
     d9e:	51 e4       	ldi	r21, 0x41	; 65
     da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	9e 83       	std	Y+6, r25	; 0x06
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <SavePassword_EEPROM+0xf4>
     dba:	88 ec       	ldi	r24, 0xC8	; 200
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <SavePassword_EEPROM+0xe2>
     dca:	9c 83       	std	Y+4, r25	; 0x04
     dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	9e 83       	std	Y+6, r25	; 0x06
     dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	9e 81       	ldd	r25, Y+6	; 0x06
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	69 f7       	brne	.-38     	; 0xdba <SavePassword_EEPROM+0xd6>
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <SavePassword_EEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de2:	6f 81       	ldd	r22, Y+7	; 0x07
     de4:	78 85       	ldd	r23, Y+8	; 0x08
     de6:	89 85       	ldd	r24, Y+9	; 0x09
     de8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <SavePassword_EEPROM+0x11e>
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
	 ************************************************************************************/
}

void SavePassword_EEPROM(Password_ConfigType * Password_Config) {

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8f 87       	std	Y+15, r24	; 0x0f
     e10:	8f 85       	ldd	r24, Y+15	; 0x0f
     e12:	85 30       	cpi	r24, 0x05	; 5
     e14:	08 f4       	brcc	.+2      	; 0xe18 <SavePassword_EEPROM+0x134>
     e16:	74 cf       	rjmp	.-280    	; 0xd00 <SavePassword_EEPROM+0x1c>
		EEPROM_writeByte(Begining_Address + Counter,
				Password_Config->PW[Counter]);
		_delay_ms(10);
	}

}
     e18:	61 96       	adiw	r28, 0x11	; 17
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ReadPassword_EEPROM>:
 * Return value: void
 * Description: Read Password from The EEPROM
 ************************************************************************************/

void ReadPassword_EEPROM(uint16 Address,
		Password_EEPROM_ConfigType * Password_Config) {
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	64 97       	sbiw	r28, 0x14	; 20
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	9a 8b       	std	Y+18, r25	; 0x12
     e40:	89 8b       	std	Y+17, r24	; 0x11
     e42:	7c 8b       	std	Y+20, r23	; 0x14
     e44:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 Value;
	LCD_clearScreen();
     e46:	0e 94 ae 12 	call	0x255c	; 0x255c <LCD_clearScreen>
	LCD_displayString("PW in EEPROM:");
     e4a:	8c e6       	ldi	r24, 0x6C	; 108
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_goToRowColumn>

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     e5a:	1f 86       	std	Y+15, r1	; 0x0f
     e5c:	99 c0       	rjmp	.+306    	; 0xf90 <ReadPassword_EEPROM+0x166>
		EEPROM_readByte(Address + Counter, &Value);
     e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	89 89       	ldd	r24, Y+17	; 0x11
     e66:	9a 89       	ldd	r25, Y+18	; 0x12
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	9e 01       	movw	r18, r28
     e6e:	20 5f       	subi	r18, 0xF0	; 240
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	b9 01       	movw	r22, r18
     e74:	0e 94 cf 08 	call	0x119e	; 0x119e <EEPROM_readByte>
		Password_Config->PW_EEPROM[Counter] = Value;
     e78:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	48 89       	ldd	r20, Y+16	; 0x10
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	fc 01       	movw	r30, r24
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	40 83       	st	Z, r20
		LCD_intgerToString(Password_Config->PW_EEPROM[Counter]);
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8b 89       	ldd	r24, Y+19	; 0x13
     e94:	9c 89       	ldd	r25, Y+20	; 0x14
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_intgerToString>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e2       	ldi	r26, 0x20	; 32
     eac:	b1 e4       	ldi	r27, 0x41	; 65
     eae:	8b 87       	std	Y+11, r24	; 0x0b
     eb0:	9c 87       	std	Y+12, r25	; 0x0c
     eb2:	ad 87       	std	Y+13, r26	; 0x0d
     eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	4a ef       	ldi	r20, 0xFA	; 250
     ec4:	54 e4       	ldi	r21, 0x44	; 68
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8f 83       	std	Y+7, r24	; 0x07
     ed0:	98 87       	std	Y+8, r25	; 0x08
     ed2:	a9 87       	std	Y+9, r26	; 0x09
     ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e8       	ldi	r20, 0x80	; 128
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eea:	88 23       	and	r24, r24
     eec:	2c f4       	brge	.+10     	; 0xef8 <ReadPassword_EEPROM+0xce>
		__ticks = 1;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	8d 83       	std	Y+5, r24	; 0x05
     ef6:	3f c0       	rjmp	.+126    	; 0xf76 <ReadPassword_EEPROM+0x14c>
	else if (__tmp > 65535)
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	4f e7       	ldi	r20, 0x7F	; 127
     f06:	57 e4       	ldi	r21, 0x47	; 71
     f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0c:	18 16       	cp	r1, r24
     f0e:	4c f5       	brge	.+82     	; 0xf62 <ReadPassword_EEPROM+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	6b 85       	ldd	r22, Y+11	; 0x0b
     f12:	7c 85       	ldd	r23, Y+12	; 0x0c
     f14:	8d 85       	ldd	r24, Y+13	; 0x0d
     f16:	9e 85       	ldd	r25, Y+14	; 0x0e
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e2       	ldi	r20, 0x20	; 32
     f1e:	51 e4       	ldi	r21, 0x41	; 65
     f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f24:	dc 01       	movw	r26, r24
     f26:	cb 01       	movw	r24, r22
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	0f c0       	rjmp	.+30     	; 0xf58 <ReadPassword_EEPROM+0x12e>
     f3a:	88 ec       	ldi	r24, 0xC8	; 200
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 83       	std	Y+3, r24	; 0x03
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <ReadPassword_EEPROM+0x11c>
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	69 f7       	brne	.-38     	; 0xf3a <ReadPassword_EEPROM+0x110>
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <ReadPassword_EEPROM+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f62:	6f 81       	ldd	r22, Y+7	; 0x07
     f64:	78 85       	ldd	r23, Y+8	; 0x08
     f66:	89 85       	ldd	r24, Y+9	; 0x09
     f68:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	9a 81       	ldd	r25, Y+2	; 0x02
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <ReadPassword_EEPROM+0x158>
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	uint8 Value;
	LCD_clearScreen();
	LCD_displayString("PW in EEPROM:");
	LCD_goToRowColumn(1, 0);

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	8f 87       	std	Y+15, r24	; 0x0f
     f90:	8f 85       	ldd	r24, Y+15	; 0x0f
     f92:	85 30       	cpi	r24, 0x05	; 5
     f94:	08 f4       	brcc	.+2      	; 0xf98 <ReadPassword_EEPROM+0x16e>
     f96:	63 cf       	rjmp	.-314    	; 0xe5e <ReadPassword_EEPROM+0x34>
		LCD_intgerToString(Password_Config->PW_EEPROM[Counter]);
		_delay_ms(10);

	}

}
     f98:	64 96       	adiw	r28, 0x14	; 20
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <CheckPassword>:
 * Parameters (in): Password_EEPROM_ConfigType * Password_Config
 * Return value: uint8
 * Description: Check Password from The EEPROM and the entered one from the user
 ************************************************************************************/

uint8 CheckPassword(Password_EEPROM_ConfigType * Password_Config) {
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <CheckPassword+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <CheckPassword+0x8>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	8b 83       	std	Y+3, r24	; 0x03

	uint8 state = TRUE;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     fbe:	19 82       	std	Y+1, r1	; 0x01
     fc0:	19 c0       	rjmp	.+50     	; 0xff4 <CheckPassword+0x4a>

		if (Password_Config->Entered_PW[Counter]
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	fc 01       	movw	r30, r24
     fd2:	35 96       	adiw	r30, 0x05	; 5
     fd4:	40 81       	ld	r20, Z
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	fc 01       	movw	r30, r24
     fe2:	e2 0f       	add	r30, r18
     fe4:	f3 1f       	adc	r31, r19
     fe6:	80 81       	ld	r24, Z
     fe8:	48 17       	cp	r20, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <CheckPassword+0x44>
				!= Password_Config->PW_EEPROM[Counter]) {

			state = FALSE;
     fec:	1a 82       	std	Y+2, r1	; 0x02

uint8 CheckPassword(Password_EEPROM_ConfigType * Password_Config) {

	uint8 state = TRUE;

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	20 f3       	brcs	.-56     	; 0xfc2 <CheckPassword+0x18>
			/*No Code*/
		}

	}

	return state;
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <Entered_PW_ECU2>:
 * Function Name: CheckPassword
 * Parameters (in): Password_EEPROM_ConfigType * Password_Config
 * Return value: void
 * Description: Enter Password to The EEPROM from The UART
 ************************************************************************************/
void Entered_PW_ECU2(Password_EEPROM_ConfigType * Password_Config) {
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <Entered_PW_ECU2+0xa>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	10 c0       	rjmp	.+32     	; 0x1042 <Entered_PW_ECU2+0x38>
		Password_Config->Entered_PW[Counter] = UART_recieveByte();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	08 2f       	mov	r16, r24
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_recieveByte>
    102c:	28 2f       	mov	r18, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	9b 81       	ldd	r25, Y+3	; 0x03
    1032:	80 0f       	add	r24, r16
    1034:	91 1f       	adc	r25, r17
    1036:	fc 01       	movw	r30, r24
    1038:	35 96       	adiw	r30, 0x05	; 5
    103a:	20 83       	st	Z, r18
 * Return value: void
 * Description: Enter Password to The EEPROM from The UART
 ************************************************************************************/
void Entered_PW_ECU2(Password_EEPROM_ConfigType * Password_Config) {

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	85 30       	cpi	r24, 0x05	; 5
    1046:	68 f3       	brcs	.-38     	; 0x1022 <Entered_PW_ECU2+0x18>
		Password_Config->Entered_PW[Counter] = UART_recieveByte();

	}
}
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	08 95       	ret

00001058 <Recieve_Option_Select>:
 * Function Name: Recieve_Option_Select
 * Parameters (in): void * Password_Config
 * Return value: uint8
 * Description: Recieve uint8 data by UART
 ************************************************************************************/
uint8 Recieve_Option_Select(void) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62

	return UART_recieveByte();
    1060:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_recieveByte>

}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <Control_door>:
 * Return value: void
 * Description: It Open the door till certain time (open_time) and then Wait
 * for (wait_time) and then close door again with the same value of its open value
 *
 ************************************************************************************/
void Control_door(uint8 open_time, uint8 wait_time) {
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <Control_door+0x6>
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	6a 83       	std	Y+2, r22	; 0x02

	Count_sec(0);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 12 13 	call	0x2624	; 0x2624 <Count_sec>

	SET_BIT(MOTOR_PORTX, MOTOR_PIN_1);
    107e:	a2 e3       	ldi	r26, 0x32	; 50
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e2 e3       	ldi	r30, 0x32	; 50
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_2);
    108c:	a2 e3       	ldi	r26, 0x32	; 50
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e2 e3       	ldi	r30, 0x32	; 50
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 77       	andi	r24, 0x7F	; 127
    1098:	8c 93       	st	X, r24
	Count_sec(open_time);
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	0e 94 12 13 	call	0x2624	; 0x2624 <Count_sec>

	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_1);
    10a0:	a2 e3       	ldi	r26, 0x32	; 50
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7b       	andi	r24, 0xBF	; 191
    10ac:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_2);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 77       	andi	r24, 0x7F	; 127
    10ba:	8c 93       	st	X, r24
	Count_sec(wait_time);
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	0e 94 12 13 	call	0x2624	; 0x2624 <Count_sec>

	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_1);
    10c2:	a2 e3       	ldi	r26, 0x32	; 50
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e2 e3       	ldi	r30, 0x32	; 50
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 7b       	andi	r24, 0xBF	; 191
    10ce:	8c 93       	st	X, r24
	SET_BIT(MOTOR_PORTX, MOTOR_PIN_2);
    10d0:	a2 e3       	ldi	r26, 0x32	; 50
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24
	Count_sec(open_time);
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	0e 94 12 13 	call	0x2624	; 0x2624 <Count_sec>

	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_1);
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 7b       	andi	r24, 0xBF	; 191
    10f0:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORTX, MOTOR_PIN_2);
    10f2:	a2 e3       	ldi	r26, 0x32	; 50
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e2 e3       	ldi	r30, 0x32	; 50
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	8c 93       	st	X, r24

}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <EEPROM_init>:

#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1112:	0e 94 2f 09 	call	0x125e	; 0x125e <TWI_init>
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <EEPROM_writeByte+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <EEPROM_writeByte+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    112e:	0e 94 45 09 	call	0x128a	; 0x128a <TWI_start>
    if (TWI_getStatus() != TW_START)
    1132:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	11 f0       	breq	.+4      	; 0x113e <EEPROM_writeByte+0x22>
        return ERROR;
    113a:	1c 82       	std	Y+4, r1	; 0x04
    113c:	28 c0       	rjmp	.+80     	; 0x118e <EEPROM_writeByte+0x72>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     * You will be given A10 A9 A8 A7 A6 A5 A4 A3 A2 A1 A0
     * And you will return Device address : 1010 A10 A9 A8 R/W */

    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	80 70       	andi	r24, 0x00	; 0
    1144:	97 70       	andi	r25, 0x07	; 7
    1146:	88 0f       	add	r24, r24
    1148:	89 2f       	mov	r24, r25
    114a:	88 1f       	adc	r24, r24
    114c:	99 0b       	sbc	r25, r25
    114e:	91 95       	neg	r25
    1150:	80 6a       	ori	r24, 0xA0	; 160
    1152:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1156:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    115a:	88 31       	cpi	r24, 0x18	; 24
    115c:	11 f0       	breq	.+4      	; 0x1162 <EEPROM_writeByte+0x46>
        return ERROR; 
    115e:	1c 82       	std	Y+4, r1	; 0x04
    1160:	16 c0       	rjmp	.+44     	; 0x118e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1168:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    116c:	88 32       	cpi	r24, 0x28	; 40
    116e:	11 f0       	breq	.+4      	; 0x1174 <EEPROM_writeByte+0x58>
        return ERROR;
    1170:	1c 82       	std	Y+4, r1	; 0x04
    1172:	0d c0       	rjmp	.+26     	; 0x118e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    117a:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    117e:	88 32       	cpi	r24, 0x28	; 40
    1180:	11 f0       	breq	.+4      	; 0x1186 <EEPROM_writeByte+0x6a>
        return ERROR;
    1182:	1c 82       	std	Y+4, r1	; 0x04
    1184:	04 c0       	rjmp	.+8      	; 0x118e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1186:	0e 94 55 09 	call	0x12aa	; 0x12aa <TWI_stop>
	
    return SUCCESS;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	8c 83       	std	Y+4, r24	; 0x04
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <EEPROM_readByte+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <EEPROM_readByte+0x8>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	7c 83       	std	Y+4, r23	; 0x04
    11b2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11b4:	0e 94 45 09 	call	0x128a	; 0x128a <TWI_start>
    if (TWI_getStatus() != TW_START)
    11b8:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	11 f0       	breq	.+4      	; 0x11c4 <EEPROM_readByte+0x26>
        return ERROR;
    11c0:	1d 82       	std	Y+5, r1	; 0x05
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	80 70       	andi	r24, 0x00	; 0
    11ca:	97 70       	andi	r25, 0x07	; 7
    11cc:	88 0f       	add	r24, r24
    11ce:	89 2f       	mov	r24, r25
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 0b       	sbc	r25, r25
    11d4:	91 95       	neg	r25
    11d6:	80 6a       	ori	r24, 0xA0	; 160
    11d8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    11dc:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    11e0:	88 31       	cpi	r24, 0x18	; 24
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <EEPROM_readByte+0x4a>
        return ERROR;
    11e4:	1d 82       	std	Y+5, r1	; 0x05
    11e6:	32 c0       	rjmp	.+100    	; 0x124c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    11ee:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    11f2:	88 32       	cpi	r24, 0x28	; 40
    11f4:	11 f0       	breq	.+4      	; 0x11fa <EEPROM_readByte+0x5c>
        return ERROR;
    11f6:	1d 82       	std	Y+5, r1	; 0x05
    11f8:	29 c0       	rjmp	.+82     	; 0x124c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    11fa:	0e 94 45 09 	call	0x128a	; 0x128a <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    11fe:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    1202:	80 31       	cpi	r24, 0x10	; 16
    1204:	11 f0       	breq	.+4      	; 0x120a <EEPROM_readByte+0x6c>
        return ERROR;
    1206:	1d 82       	std	Y+5, r1	; 0x05
    1208:	21 c0       	rjmp	.+66     	; 0x124c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	80 70       	andi	r24, 0x00	; 0
    1210:	97 70       	andi	r25, 0x07	; 7
    1212:	88 0f       	add	r24, r24
    1214:	89 2f       	mov	r24, r25
    1216:	88 1f       	adc	r24, r24
    1218:	99 0b       	sbc	r25, r25
    121a:	91 95       	neg	r25
    121c:	81 6a       	ori	r24, 0xA1	; 161
    121e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1222:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    1226:	80 34       	cpi	r24, 0x40	; 64
    1228:	11 f0       	breq	.+4      	; 0x122e <EEPROM_readByte+0x90>
        return ERROR;
    122a:	1d 82       	std	Y+5, r1	; 0x05
    122c:	0f c0       	rjmp	.+30     	; 0x124c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    122e:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_readWithNACK>
    1232:	eb 81       	ldd	r30, Y+3	; 0x03
    1234:	fc 81       	ldd	r31, Y+4	; 0x04
    1236:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1238:	0e 94 9d 09 	call	0x133a	; 0x133a <TWI_getStatus>
    123c:	88 35       	cpi	r24, 0x58	; 88
    123e:	11 f0       	breq	.+4      	; 0x1244 <EEPROM_readByte+0xa6>
        return ERROR;
    1240:	1d 82       	std	Y+5, r1	; 0x05
    1242:	04 c0       	rjmp	.+8      	; 0x124c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1244:	0e 94 55 09 	call	0x12aa	; 0x12aa <TWI_stop>
    return SUCCESS;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TWI_init>:

 
#include "i2c.h"

void TWI_init(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1266:	e0 e2       	ldi	r30, 0x20	; 32
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 83       	st	Z, r24
	TWSR = 0x00;
    126e:	e1 e2       	ldi	r30, 0x21	; 33
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    1274:	e2 e2       	ldi	r30, 0x22	; 34
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    127c:	e6 e5       	ldi	r30, 0x56	; 86
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	84 e0       	ldi	r24, 0x04	; 4
    1282:	80 83       	st	Z, r24
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <TWI_start>:

void TWI_start(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1292:	e6 e5       	ldi	r30, 0x56	; 86
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	84 ea       	ldi	r24, 0xA4	; 164
    1298:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    129a:	e6 e5       	ldi	r30, 0x56	; 86
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	88 23       	and	r24, r24
    12a2:	dc f7       	brge	.-10     	; 0x129a <TWI_start+0x10>
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <TWI_stop>:

void TWI_stop(void)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    12b2:	e6 e5       	ldi	r30, 0x56	; 86
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	84 e9       	ldi	r24, 0x94	; 148
    12b8:	80 83       	st	Z, r24
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <TWI_write>:

void TWI_write(uint8 data)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    12cc:	e3 e2       	ldi	r30, 0x23	; 35
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    12d4:	e6 e5       	ldi	r30, 0x56	; 86
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	84 e8       	ldi	r24, 0x84	; 132
    12da:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    12dc:	e6 e5       	ldi	r30, 0x56	; 86
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 23       	and	r24, r24
    12e4:	dc f7       	brge	.-10     	; 0x12dc <TWI_write+0x1c>
}
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    12f6:	e6 e5       	ldi	r30, 0x56	; 86
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	84 ec       	ldi	r24, 0xC4	; 196
    12fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	dc f7       	brge	.-10     	; 0x12fe <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1308:	e3 e2       	ldi	r30, 0x23	; 35
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
}
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    131c:	e6 e5       	ldi	r30, 0x56	; 86
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	84 e8       	ldi	r24, 0x84	; 132
    1322:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1324:	e6 e5       	ldi	r30, 0x56	; 86
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 23       	and	r24, r24
    132c:	dc f7       	brge	.-10     	; 0x1324 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    132e:	e3 e2       	ldi	r30, 0x23	; 35
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1344:	e1 e2       	ldi	r30, 0x21	; 33
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	88 7f       	andi	r24, 0xF8	; 248
    134c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <LCD_init>:

              /*******************************************************************************
                *                      Functions Definitions                                  *
               *******************************************************************************/
void LCD_init(void)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1360:	a1 e3       	ldi	r26, 0x31	; 49
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e1 e3       	ldi	r30, 0x31	; 49
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 67       	ori	r24, 0x70	; 112
    136c:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    136e:	a7 e3       	ldi	r26, 0x37	; 55
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e7 e3       	ldi	r30, 0x37	; 55
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 6f       	ori	r24, 0xF0	; 240
    137a:	8c 93       	st	X, r24

		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif

		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1382:	88 e2       	ldi	r24, 0x28	; 40
    1384:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1388:	8c e0       	ldi	r24, 0x0C	; 12
    138a:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	c3 56       	subi	r28, 0x63	; 99
    13a8:	d0 40       	sbci	r29, 0x00	; 0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	fe 01       	movw	r30, r28
    13b6:	ed 59       	subi	r30, 0x9D	; 157
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    13bc:	a2 e3       	ldi	r26, 0x32	; 50
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e2 e3       	ldi	r30, 0x32	; 50
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8f 7e       	andi	r24, 0xEF	; 239
    13c8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    13ca:	a2 e3       	ldi	r26, 0x32	; 50
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	8c 93       	st	X, r24
    13d8:	fe 01       	movw	r30, r28
    13da:	e1 5a       	subi	r30, 0xA1	; 161
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e8       	ldi	r26, 0x80	; 128
    13e4:	bf e3       	ldi	r27, 0x3F	; 63
    13e6:	80 83       	st	Z, r24
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	a2 83       	std	Z+2, r26	; 0x02
    13ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	8e 01       	movw	r16, r28
    13f0:	05 5a       	subi	r16, 0xA5	; 165
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	fe 01       	movw	r30, r28
    13f6:	e1 5a       	subi	r30, 0xA1	; 161
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4a ef       	ldi	r20, 0xFA	; 250
    1408:	54 e4       	ldi	r21, 0x44	; 68
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	f8 01       	movw	r30, r16
    1414:	80 83       	st	Z, r24
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    141c:	fe 01       	movw	r30, r28
    141e:	e5 5a       	subi	r30, 0xA5	; 165
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	44 f4       	brge	.+16     	; 0x144a <LCD_sendCommand+0xb0>
		__ticks = 1;
    143a:	fe 01       	movw	r30, r28
    143c:	e7 5a       	subi	r30, 0xA7	; 167
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	80 83       	st	Z, r24
    1448:	64 c0       	rjmp	.+200    	; 0x1512 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    144a:	fe 01       	movw	r30, r28
    144c:	e5 5a       	subi	r30, 0xA5	; 165
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	93 81       	ldd	r25, Z+3	; 0x03
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	0c f0       	brlt	.+2      	; 0x146a <LCD_sendCommand+0xd0>
    1468:	43 c0       	rjmp	.+134    	; 0x14f0 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	fe 01       	movw	r30, r28
    146c:	e1 5a       	subi	r30, 0xA1	; 161
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8e 01       	movw	r16, r28
    148a:	07 5a       	subi	r16, 0xA7	; 167
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	f8 01       	movw	r30, r16
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
    14a0:	1f c0       	rjmp	.+62     	; 0x14e0 <LCD_sendCommand+0x146>
    14a2:	fe 01       	movw	r30, r28
    14a4:	e9 5a       	subi	r30, 0xA9	; 169
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24
    14b0:	fe 01       	movw	r30, r28
    14b2:	e9 5a       	subi	r30, 0xA9	; 169
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_sendCommand+0x120>
    14be:	fe 01       	movw	r30, r28
    14c0:	e9 5a       	subi	r30, 0xA9	; 169
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c8:	de 01       	movw	r26, r28
    14ca:	a7 5a       	subi	r26, 0xA7	; 167
    14cc:	bf 4f       	sbci	r27, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	e7 5a       	subi	r30, 0xA7	; 167
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	9c 93       	st	X, r25
    14de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	fe 01       	movw	r30, r28
    14e2:	e7 5a       	subi	r30, 0xA7	; 167
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	d1 f6       	brne	.-76     	; 0x14a2 <LCD_sendCommand+0x108>
    14ee:	27 c0       	rjmp	.+78     	; 0x153e <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f0:	8e 01       	movw	r16, r28
    14f2:	07 5a       	subi	r16, 0xA7	; 167
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	fe 01       	movw	r30, r28
    14f8:	e5 5a       	subi	r30, 0xA5	; 165
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	f8 01       	movw	r30, r16
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	80 83       	st	Z, r24
    1512:	de 01       	movw	r26, r28
    1514:	ab 5a       	subi	r26, 0xAB	; 171
    1516:	bf 4f       	sbci	r27, 0xFF	; 255
    1518:	fe 01       	movw	r30, r28
    151a:	e7 5a       	subi	r30, 0xA7	; 167
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	8d 93       	st	X+, r24
    1524:	9c 93       	st	X, r25
    1526:	fe 01       	movw	r30, r28
    1528:	eb 5a       	subi	r30, 0xAB	; 171
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <LCD_sendCommand+0x196>
    1534:	fe 01       	movw	r30, r28
    1536:	eb 5a       	subi	r30, 0xAB	; 171
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    153e:	a2 e3       	ldi	r26, 0x32	; 50
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e2 e3       	ldi	r30, 0x32	; 50
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 64       	ori	r24, 0x40	; 64
    154a:	8c 93       	st	X, r24
    154c:	fe 01       	movw	r30, r28
    154e:	ef 5a       	subi	r30, 0xAF	; 175
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e8       	ldi	r26, 0x80	; 128
    1558:	bf e3       	ldi	r27, 0x3F	; 63
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	8e 01       	movw	r16, r28
    1564:	03 5b       	subi	r16, 0xB3	; 179
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	ef 5a       	subi	r30, 0xAF	; 175
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a ef       	ldi	r20, 0xFA	; 250
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1590:	fe 01       	movw	r30, r28
    1592:	e3 5b       	subi	r30, 0xB3	; 179
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	44 f4       	brge	.+16     	; 0x15be <LCD_sendCommand+0x224>
		__ticks = 1;
    15ae:	fe 01       	movw	r30, r28
    15b0:	e5 5b       	subi	r30, 0xB5	; 181
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    15be:	fe 01       	movw	r30, r28
    15c0:	e3 5b       	subi	r30, 0xB3	; 179
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <LCD_sendCommand+0x244>
    15dc:	43 c0       	rjmp	.+134    	; 0x1664 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	ef 5a       	subi	r30, 0xAF	; 175
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8e 01       	movw	r16, r28
    15fe:	05 5b       	subi	r16, 0xB5	; 181
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	1f c0       	rjmp	.+62     	; 0x1654 <LCD_sendCommand+0x2ba>
    1616:	fe 01       	movw	r30, r28
    1618:	e7 5b       	subi	r30, 0xB7	; 183
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5b       	subi	r30, 0xB7	; 183
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_sendCommand+0x294>
    1632:	fe 01       	movw	r30, r28
    1634:	e7 5b       	subi	r30, 0xB7	; 183
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	de 01       	movw	r26, r28
    163e:	a5 5b       	subi	r26, 0xB5	; 181
    1640:	bf 4f       	sbci	r27, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e5 5b       	subi	r30, 0xB5	; 181
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	9c 93       	st	X, r25
    1652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	fe 01       	movw	r30, r28
    1656:	e5 5b       	subi	r30, 0xB5	; 181
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	d1 f6       	brne	.-76     	; 0x1616 <LCD_sendCommand+0x27c>
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	8e 01       	movw	r16, r28
    1666:	05 5b       	subi	r16, 0xB5	; 181
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e3 5b       	subi	r30, 0xB3	; 179
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	de 01       	movw	r26, r28
    1688:	a9 5b       	subi	r26, 0xB9	; 185
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e5 5b       	subi	r30, 0xB5	; 181
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	8d 93       	st	X+, r24
    1698:	9c 93       	st	X, r25
    169a:	fe 01       	movw	r30, r28
    169c:	e9 5b       	subi	r30, 0xB9	; 185
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_sendCommand+0x30a>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e9 5b       	subi	r30, 0xB9	; 185
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	98 2f       	mov	r25, r24
    16be:	9f 70       	andi	r25, 0x0F	; 15
    16c0:	fe 01       	movw	r30, r28
    16c2:	ed 59       	subi	r30, 0x9D	; 157
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 81       	ld	r24, Z
    16c8:	80 7f       	andi	r24, 0xF0	; 240
    16ca:	89 2b       	or	r24, r25
    16cc:	8c 93       	st	X, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	ed 5b       	subi	r30, 0xBD	; 189
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e8       	ldi	r26, 0x80	; 128
    16da:	bf e3       	ldi	r27, 0x3F	; 63
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	8e 01       	movw	r16, r28
    16e6:	01 5c       	subi	r16, 0xC1	; 193
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	ed 5b       	subi	r30, 0xBD	; 189
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a ef       	ldi	r20, 0xFA	; 250
    16fe:	54 e4       	ldi	r21, 0x44	; 68
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	f8 01       	movw	r30, r16
    170a:	80 83       	st	Z, r24
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	a2 83       	std	Z+2, r26	; 0x02
    1710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1712:	fe 01       	movw	r30, r28
    1714:	ff 96       	adiw	r30, 0x3f	; 63
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <LCD_sendCommand+0x39e>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9e af       	std	Y+62, r25	; 0x3e
    1734:	8d af       	std	Y+61, r24	; 0x3d
    1736:	46 c0       	rjmp	.+140    	; 0x17c4 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1738:	fe 01       	movw	r30, r28
    173a:	ff 96       	adiw	r30, 0x3f	; 63
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	4f e7       	ldi	r20, 0x7F	; 127
    174a:	57 e4       	ldi	r21, 0x47	; 71
    174c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1750:	18 16       	cp	r1, r24
    1752:	64 f5       	brge	.+88     	; 0x17ac <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1754:	fe 01       	movw	r30, r28
    1756:	ed 5b       	subi	r30, 0xBD	; 189
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9e af       	std	Y+62, r25	; 0x3e
    1780:	8d af       	std	Y+61, r24	; 0x3d
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <LCD_sendCommand+0x408>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c af       	std	Y+60, r25	; 0x3c
    178a:	8b af       	std	Y+59, r24	; 0x3b
    178c:	8b ad       	ldd	r24, Y+59	; 0x3b
    178e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_sendCommand+0x3f6>
    1794:	9c af       	std	Y+60, r25	; 0x3c
    1796:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8d ad       	ldd	r24, Y+61	; 0x3d
    179a:	9e ad       	ldd	r25, Y+62	; 0x3e
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9e af       	std	Y+62, r25	; 0x3e
    17a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <LCD_sendCommand+0x3ea>
    17aa:	16 c0       	rjmp	.+44     	; 0x17d8 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	fe 01       	movw	r30, r28
    17ae:	ff 96       	adiw	r30, 0x3f	; 63
    17b0:	60 81       	ld	r22, Z
    17b2:	71 81       	ldd	r23, Z+1	; 0x01
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9e af       	std	Y+62, r25	; 0x3e
    17c2:	8d af       	std	Y+61, r24	; 0x3d
    17c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c8:	9a af       	std	Y+58, r25	; 0x3a
    17ca:	89 af       	std	Y+57, r24	; 0x39
    17cc:	89 ad       	ldd	r24, Y+57	; 0x39
    17ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_sendCommand+0x436>
    17d4:	9a af       	std	Y+58, r25	; 0x3a
    17d6:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    17d8:	a2 e3       	ldi	r26, 0x32	; 50
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e2 e3       	ldi	r30, 0x32	; 50
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 7b       	andi	r24, 0xBF	; 191
    17e4:	8c 93       	st	X, r24
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e8       	ldi	r26, 0x80	; 128
    17ec:	bf e3       	ldi	r27, 0x3F	; 63
    17ee:	8d ab       	std	Y+53, r24	; 0x35
    17f0:	9e ab       	std	Y+54, r25	; 0x36
    17f2:	af ab       	std	Y+55, r26	; 0x37
    17f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f6:	6d a9       	ldd	r22, Y+53	; 0x35
    17f8:	7e a9       	ldd	r23, Y+54	; 0x36
    17fa:	8f a9       	ldd	r24, Y+55	; 0x37
    17fc:	98 ad       	ldd	r25, Y+56	; 0x38
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4a ef       	ldi	r20, 0xFA	; 250
    1804:	54 e4       	ldi	r21, 0x44	; 68
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	89 ab       	std	Y+49, r24	; 0x31
    1810:	9a ab       	std	Y+50, r25	; 0x32
    1812:	ab ab       	std	Y+51, r26	; 0x33
    1814:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1816:	69 a9       	ldd	r22, Y+49	; 0x31
    1818:	7a a9       	ldd	r23, Y+50	; 0x32
    181a:	8b a9       	ldd	r24, Y+51	; 0x33
    181c:	9c a9       	ldd	r25, Y+52	; 0x34
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	40 e8       	ldi	r20, 0x80	; 128
    1824:	5f e3       	ldi	r21, 0x3F	; 63
    1826:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182a:	88 23       	and	r24, r24
    182c:	2c f4       	brge	.+10     	; 0x1838 <LCD_sendCommand+0x49e>
		__ticks = 1;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	3f c0       	rjmp	.+126    	; 0x18b6 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1838:	69 a9       	ldd	r22, Y+49	; 0x31
    183a:	7a a9       	ldd	r23, Y+50	; 0x32
    183c:	8b a9       	ldd	r24, Y+51	; 0x33
    183e:	9c a9       	ldd	r25, Y+52	; 0x34
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	57 e4       	ldi	r21, 0x47	; 71
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184c:	18 16       	cp	r1, r24
    184e:	4c f5       	brge	.+82     	; 0x18a2 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1850:	6d a9       	ldd	r22, Y+53	; 0x35
    1852:	7e a9       	ldd	r23, Y+54	; 0x36
    1854:	8f a9       	ldd	r24, Y+55	; 0x37
    1856:	98 ad       	ldd	r25, Y+56	; 0x38
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e2       	ldi	r20, 0x20	; 32
    185e:	51 e4       	ldi	r21, 0x41	; 65
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	98 ab       	std	Y+48, r25	; 0x30
    1876:	8f a7       	std	Y+47, r24	; 0x2f
    1878:	0f c0       	rjmp	.+30     	; 0x1898 <LCD_sendCommand+0x4fe>
    187a:	88 ec       	ldi	r24, 0xC8	; 200
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e a7       	std	Y+46, r25	; 0x2e
    1880:	8d a7       	std	Y+45, r24	; 0x2d
    1882:	8d a5       	ldd	r24, Y+45	; 0x2d
    1884:	9e a5       	ldd	r25, Y+46	; 0x2e
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <LCD_sendCommand+0x4ec>
    188a:	9e a7       	std	Y+46, r25	; 0x2e
    188c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1890:	98 a9       	ldd	r25, Y+48	; 0x30
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	98 ab       	std	Y+48, r25	; 0x30
    1896:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1898:	8f a5       	ldd	r24, Y+47	; 0x2f
    189a:	98 a9       	ldd	r25, Y+48	; 0x30
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	69 f7       	brne	.-38     	; 0x187a <LCD_sendCommand+0x4e0>
    18a0:	14 c0       	rjmp	.+40     	; 0x18ca <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a2:	69 a9       	ldd	r22, Y+49	; 0x31
    18a4:	7a a9       	ldd	r23, Y+50	; 0x32
    18a6:	8b a9       	ldd	r24, Y+51	; 0x33
    18a8:	9c a9       	ldd	r25, Y+52	; 0x34
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	98 ab       	std	Y+48, r25	; 0x30
    18b4:	8f a7       	std	Y+47, r24	; 0x2f
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	9c a7       	std	Y+44, r25	; 0x2c
    18bc:	8b a7       	std	Y+43, r24	; 0x2b
    18be:	8b a5       	ldd	r24, Y+43	; 0x2b
    18c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <LCD_sendCommand+0x528>
    18c6:	9c a7       	std	Y+44, r25	; 0x2c
    18c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18ca:	a2 e3       	ldi	r26, 0x32	; 50
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e2 e3       	ldi	r30, 0x32	; 50
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 64       	ori	r24, 0x40	; 64
    18d6:	8c 93       	st	X, r24
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e8       	ldi	r26, 0x80	; 128
    18de:	bf e3       	ldi	r27, 0x3F	; 63
    18e0:	8f a3       	std	Y+39, r24	; 0x27
    18e2:	98 a7       	std	Y+40, r25	; 0x28
    18e4:	a9 a7       	std	Y+41, r26	; 0x29
    18e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ea:	78 a5       	ldd	r23, Y+40	; 0x28
    18ec:	89 a5       	ldd	r24, Y+41	; 0x29
    18ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8b a3       	std	Y+35, r24	; 0x23
    1902:	9c a3       	std	Y+36, r25	; 0x24
    1904:	ad a3       	std	Y+37, r26	; 0x25
    1906:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1908:	6b a1       	ldd	r22, Y+35	; 0x23
    190a:	7c a1       	ldd	r23, Y+36	; 0x24
    190c:	8d a1       	ldd	r24, Y+37	; 0x25
    190e:	9e a1       	ldd	r25, Y+38	; 0x26
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <LCD_sendCommand+0x590>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9a a3       	std	Y+34, r25	; 0x22
    1926:	89 a3       	std	Y+33, r24	; 0x21
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    192a:	6b a1       	ldd	r22, Y+35	; 0x23
    192c:	7c a1       	ldd	r23, Y+36	; 0x24
    192e:	8d a1       	ldd	r24, Y+37	; 0x25
    1930:	9e a1       	ldd	r25, Y+38	; 0x26
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	6f a1       	ldd	r22, Y+39	; 0x27
    1944:	78 a5       	ldd	r23, Y+40	; 0x28
    1946:	89 a5       	ldd	r24, Y+41	; 0x29
    1948:	9a a5       	ldd	r25, Y+42	; 0x2a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9a a3       	std	Y+34, r25	; 0x22
    1968:	89 a3       	std	Y+33, r24	; 0x21
    196a:	0f c0       	rjmp	.+30     	; 0x198a <LCD_sendCommand+0x5f0>
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	98 a3       	std	Y+32, r25	; 0x20
    1972:	8f 8f       	std	Y+31, r24	; 0x1f
    1974:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1976:	98 a1       	ldd	r25, Y+32	; 0x20
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_sendCommand+0x5de>
    197c:	98 a3       	std	Y+32, r25	; 0x20
    197e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	89 a1       	ldd	r24, Y+33	; 0x21
    1982:	9a a1       	ldd	r25, Y+34	; 0x22
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <LCD_sendCommand+0x5d2>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6b a1       	ldd	r22, Y+35	; 0x23
    1996:	7c a1       	ldd	r23, Y+36	; 0x24
    1998:	8d a1       	ldd	r24, Y+37	; 0x25
    199a:	9e a1       	ldd	r25, Y+38	; 0x26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9a a3       	std	Y+34, r25	; 0x22
    19a6:	89 a3       	std	Y+33, r24	; 0x21
    19a8:	89 a1       	ldd	r24, Y+33	; 0x21
    19aa:	9a a1       	ldd	r25, Y+34	; 0x22
    19ac:	9e 8f       	std	Y+30, r25	; 0x1e
    19ae:	8d 8f       	std	Y+29, r24	; 0x1d
    19b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_sendCommand+0x61a>
    19b8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    19bc:	a8 e3       	ldi	r26, 0x38	; 56
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e8 e3       	ldi	r30, 0x38	; 56
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	28 2f       	mov	r18, r24
    19c8:	2f 70       	andi	r18, 0x0F	; 15
    19ca:	fe 01       	movw	r30, r28
    19cc:	ed 59       	subi	r30, 0x9D	; 157
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	82 95       	swap	r24
    19d8:	92 95       	swap	r25
    19da:	90 7f       	andi	r25, 0xF0	; 240
    19dc:	98 27       	eor	r25, r24
    19de:	80 7f       	andi	r24, 0xF0	; 240
    19e0:	98 27       	eor	r25, r24
    19e2:	82 2b       	or	r24, r18
    19e4:	8c 93       	st	X, r24
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e8       	ldi	r26, 0x80	; 128
    19ec:	bf e3       	ldi	r27, 0x3F	; 63
    19ee:	89 8f       	std	Y+25, r24	; 0x19
    19f0:	9a 8f       	std	Y+26, r25	; 0x1a
    19f2:	ab 8f       	std	Y+27, r26	; 0x1b
    19f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8d 8b       	std	Y+21, r24	; 0x15
    1a10:	9e 8b       	std	Y+22, r25	; 0x16
    1a12:	af 8b       	std	Y+23, r26	; 0x17
    1a14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a16:	6d 89       	ldd	r22, Y+21	; 0x15
    1a18:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LCD_sendCommand+0x69e>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1a38:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	69 8d       	ldd	r22, Y+25	; 0x19
    1a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_sendCommand+0x6fe>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9a 8b       	std	Y+18, r25	; 0x12
    1a80:	89 8b       	std	Y+17, r24	; 0x11
    1a82:	89 89       	ldd	r24, Y+17	; 0x11
    1a84:	9a 89       	ldd	r25, Y+18	; 0x12
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_sendCommand+0x6ec>
    1a8a:	9a 8b       	std	Y+18, r25	; 0x12
    1a8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9c 8b       	std	Y+20, r25	; 0x14
    1a96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <LCD_sendCommand+0x6e0>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	98 8b       	std	Y+16, r25	; 0x10
    1abc:	8f 87       	std	Y+15, r24	; 0x0f
    1abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac0:	98 89       	ldd	r25, Y+16	; 0x10
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_sendCommand+0x728>
    1ac6:	98 8b       	std	Y+16, r25	; 0x10
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1aca:	a2 e3       	ldi	r26, 0x32	; 50
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e2 e3       	ldi	r30, 0x32	; 50
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 7b       	andi	r24, 0xBF	; 191
    1ad6:	8c 93       	st	X, r24
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a0 e8       	ldi	r26, 0x80	; 128
    1ade:	bf e3       	ldi	r27, 0x3F	; 63
    1ae0:	8b 87       	std	Y+11, r24	; 0x0b
    1ae2:	9c 87       	std	Y+12, r25	; 0x0c
    1ae4:	ad 87       	std	Y+13, r26	; 0x0d
    1ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	4a ef       	ldi	r20, 0xFA	; 250
    1af6:	54 e4       	ldi	r21, 0x44	; 68
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8f 83       	std	Y+7, r24	; 0x07
    1b02:	98 87       	std	Y+8, r25	; 0x08
    1b04:	a9 87       	std	Y+9, r26	; 0x09
    1b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <LCD_sendCommand+0x790>
		__ticks = 1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	3f c0       	rjmp	.+126    	; 0x1ba8 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	4c f5       	brge	.+82     	; 0x1b94 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	0f c0       	rjmp	.+30     	; 0x1b8a <LCD_sendCommand+0x7f0>
    1b6c:	88 ec       	ldi	r24, 0xC8	; 200
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_sendCommand+0x7de>
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <LCD_sendCommand+0x7d2>
    1b92:	14 c0       	rjmp	.+40     	; 0x1bbc <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b94:	6f 81       	ldd	r22, Y+7	; 0x07
    1b96:	78 85       	ldd	r23, Y+8	; 0x08
    1b98:	89 85       	ldd	r24, Y+9	; 0x09
    1b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	8d 83       	std	Y+5, r24	; 0x05
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_sendCommand+0x81a>
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bbc:	cd 59       	subi	r28, 0x9D	; 157
    1bbe:	df 4f       	sbci	r29, 0xFF	; 255
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	c3 56       	subi	r28, 0x63	; 99
    1be2:	d0 40       	sbci	r29, 0x00	; 0
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ed 59       	subi	r30, 0x9D	; 157
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1bf6:	a2 e3       	ldi	r26, 0x32	; 50
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e2 e3       	ldi	r30, 0x32	; 50
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 61       	ori	r24, 0x10	; 16
    1c02:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c04:	a2 e3       	ldi	r26, 0x32	; 50
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7d       	andi	r24, 0xDF	; 223
    1c10:	8c 93       	st	X, r24
    1c12:	fe 01       	movw	r30, r28
    1c14:	e1 5a       	subi	r30, 0xA1	; 161
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	a0 e8       	ldi	r26, 0x80	; 128
    1c1e:	bf e3       	ldi	r27, 0x3F	; 63
    1c20:	80 83       	st	Z, r24
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	a2 83       	std	Z+2, r26	; 0x02
    1c26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	8e 01       	movw	r16, r28
    1c2a:	05 5a       	subi	r16, 0xA5	; 165
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e1 5a       	subi	r30, 0xA1	; 161
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a ef       	ldi	r20, 0xFA	; 250
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	f8 01       	movw	r30, r16
    1c4e:	80 83       	st	Z, r24
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	a2 83       	std	Z+2, r26	; 0x02
    1c54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c56:	fe 01       	movw	r30, r28
    1c58:	e5 5a       	subi	r30, 0xA5	; 165
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	44 f4       	brge	.+16     	; 0x1c84 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1c74:	fe 01       	movw	r30, r28
    1c76:	e7 5a       	subi	r30, 0xA7	; 167
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	64 c0       	rjmp	.+200    	; 0x1d4c <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1c84:	fe 01       	movw	r30, r28
    1c86:	e5 5a       	subi	r30, 0xA5	; 165
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	0c f0       	brlt	.+2      	; 0x1ca4 <LCD_displayCharacter+0xd0>
    1ca2:	43 c0       	rjmp	.+134    	; 0x1d2a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e1 5a       	subi	r30, 0xA1	; 161
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8e 01       	movw	r16, r28
    1cc4:	07 5a       	subi	r16, 0xA7	; 167
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	bc 01       	movw	r22, r24
    1cca:	cd 01       	movw	r24, r26
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
    1cda:	1f c0       	rjmp	.+62     	; 0x1d1a <LCD_displayCharacter+0x146>
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e9 5a       	subi	r30, 0xA9	; 169
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	88 ec       	ldi	r24, 0xC8	; 200
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	fe 01       	movw	r30, r28
    1cec:	e9 5a       	subi	r30, 0xA9	; 169
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_displayCharacter+0x120>
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e9 5a       	subi	r30, 0xA9	; 169
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	de 01       	movw	r26, r28
    1d04:	a7 5a       	subi	r26, 0xA7	; 167
    1d06:	bf 4f       	sbci	r27, 0xFF	; 255
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e7 5a       	subi	r30, 0xA7	; 167
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	11 96       	adiw	r26, 0x01	; 1
    1d16:	9c 93       	st	X, r25
    1d18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e7 5a       	subi	r30, 0xA7	; 167
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	91 81       	ldd	r25, Z+1	; 0x01
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	d1 f6       	brne	.-76     	; 0x1cdc <LCD_displayCharacter+0x108>
    1d28:	27 c0       	rjmp	.+78     	; 0x1d78 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	07 5a       	subi	r16, 0xA7	; 167
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	fe 01       	movw	r30, r28
    1d32:	e5 5a       	subi	r30, 0xA5	; 165
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
    1d4c:	de 01       	movw	r26, r28
    1d4e:	ab 5a       	subi	r26, 0xAB	; 171
    1d50:	bf 4f       	sbci	r27, 0xFF	; 255
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 5a       	subi	r30, 0xA7	; 167
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	8d 93       	st	X+, r24
    1d5e:	9c 93       	st	X, r25
    1d60:	fe 01       	movw	r30, r28
    1d62:	eb 5a       	subi	r30, 0xAB	; 171
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	91 81       	ldd	r25, Z+1	; 0x01
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_displayCharacter+0x196>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	eb 5a       	subi	r30, 0xAB	; 171
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d78:	a2 e3       	ldi	r26, 0x32	; 50
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e2 e3       	ldi	r30, 0x32	; 50
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 64       	ori	r24, 0x40	; 64
    1d84:	8c 93       	st	X, r24
    1d86:	fe 01       	movw	r30, r28
    1d88:	ef 5a       	subi	r30, 0xAF	; 175
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	80 83       	st	Z, r24
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	a2 83       	std	Z+2, r26	; 0x02
    1d9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	03 5b       	subi	r16, 0xB3	; 179
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	fe 01       	movw	r30, r28
    1da4:	ef 5a       	subi	r30, 0xAF	; 175
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	80 83       	st	Z, r24
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	a2 83       	std	Z+2, r26	; 0x02
    1dc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e3 5b       	subi	r30, 0xB3	; 179
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	60 81       	ld	r22, Z
    1dd2:	71 81       	ldd	r23, Z+1	; 0x01
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	44 f4       	brge	.+16     	; 0x1df8 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 5b       	subi	r30, 0xB5	; 181
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	64 c0       	rjmp	.+200    	; 0x1ec0 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e3 5b       	subi	r30, 0xB3	; 179
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <LCD_displayCharacter+0x244>
    1e16:	43 c0       	rjmp	.+134    	; 0x1e9e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ef 5a       	subi	r30, 0xAF	; 175
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8e 01       	movw	r16, r28
    1e38:	05 5b       	subi	r16, 0xB5	; 181
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	f8 01       	movw	r30, r16
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	1f c0       	rjmp	.+62     	; 0x1e8e <LCD_displayCharacter+0x2ba>
    1e50:	fe 01       	movw	r30, r28
    1e52:	e7 5b       	subi	r30, 0xB7	; 183
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e7 5b       	subi	r30, 0xB7	; 183
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_displayCharacter+0x294>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e7 5b       	subi	r30, 0xB7	; 183
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	de 01       	movw	r26, r28
    1e78:	a5 5b       	subi	r26, 0xB5	; 181
    1e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e5 5b       	subi	r30, 0xB5	; 181
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	11 96       	adiw	r26, 0x01	; 1
    1e8a:	9c 93       	st	X, r25
    1e8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e5 5b       	subi	r30, 0xB5	; 181
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	d1 f6       	brne	.-76     	; 0x1e50 <LCD_displayCharacter+0x27c>
    1e9c:	27 c0       	rjmp	.+78     	; 0x1eec <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	05 5b       	subi	r16, 0xB5	; 181
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e3 5b       	subi	r30, 0xB3	; 179
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	f8 01       	movw	r30, r16
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	de 01       	movw	r26, r28
    1ec2:	a9 5b       	subi	r26, 0xB9	; 185
    1ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e5 5b       	subi	r30, 0xB5	; 181
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	8d 93       	st	X+, r24
    1ed2:	9c 93       	st	X, r25
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e9 5b       	subi	r30, 0xB9	; 185
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <LCD_displayCharacter+0x30a>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e9 5b       	subi	r30, 0xB9	; 185
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1eec:	a8 e3       	ldi	r26, 0x38	; 56
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e8 e3       	ldi	r30, 0x38	; 56
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	9f 70       	andi	r25, 0x0F	; 15
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 59       	subi	r30, 0x9D	; 157
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	80 7f       	andi	r24, 0xF0	; 240
    1f04:	89 2b       	or	r24, r25
    1f06:	8c 93       	st	X, r24
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ed 5b       	subi	r30, 0xBD	; 189
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e8       	ldi	r26, 0x80	; 128
    1f14:	bf e3       	ldi	r27, 0x3F	; 63
    1f16:	80 83       	st	Z, r24
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	a2 83       	std	Z+2, r26	; 0x02
    1f1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	8e 01       	movw	r16, r28
    1f20:	01 5c       	subi	r16, 0xC1	; 193
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	fe 01       	movw	r30, r28
    1f26:	ed 5b       	subi	r30, 0xBD	; 189
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	f8 01       	movw	r30, r16
    1f44:	80 83       	st	Z, r24
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	a2 83       	std	Z+2, r26	; 0x02
    1f4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	ff 96       	adiw	r30, 0x3f	; 63
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9e af       	std	Y+62, r25	; 0x3e
    1f6e:	8d af       	std	Y+61, r24	; 0x3d
    1f70:	46 c0       	rjmp	.+140    	; 0x1ffe <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	ff 96       	adiw	r30, 0x3f	; 63
    1f76:	60 81       	ld	r22, Z
    1f78:	71 81       	ldd	r23, Z+1	; 0x01
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	64 f5       	brge	.+88     	; 0x1fe6 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ed 5b       	subi	r30, 0xBD	; 189
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e af       	std	Y+62, r25	; 0x3e
    1fba:	8d af       	std	Y+61, r24	; 0x3d
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_displayCharacter+0x408>
    1fbe:	88 ec       	ldi	r24, 0xC8	; 200
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9c af       	std	Y+60, r25	; 0x3c
    1fc4:	8b af       	std	Y+59, r24	; 0x3b
    1fc6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fc8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_displayCharacter+0x3f6>
    1fce:	9c af       	std	Y+60, r25	; 0x3c
    1fd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9e af       	std	Y+62, r25	; 0x3e
    1fda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <LCD_displayCharacter+0x3ea>
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ff 96       	adiw	r30, 0x3f	; 63
    1fea:	60 81       	ld	r22, Z
    1fec:	71 81       	ldd	r23, Z+1	; 0x01
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e af       	std	Y+62, r25	; 0x3e
    1ffc:	8d af       	std	Y+61, r24	; 0x3d
    1ffe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2000:	9e ad       	ldd	r25, Y+62	; 0x3e
    2002:	9a af       	std	Y+58, r25	; 0x3a
    2004:	89 af       	std	Y+57, r24	; 0x39
    2006:	89 ad       	ldd	r24, Y+57	; 0x39
    2008:	9a ad       	ldd	r25, Y+58	; 0x3a
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_displayCharacter+0x436>
    200e:	9a af       	std	Y+58, r25	; 0x3a
    2010:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2012:	a2 e3       	ldi	r26, 0x32	; 50
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e2 e3       	ldi	r30, 0x32	; 50
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8f 7b       	andi	r24, 0xBF	; 191
    201e:	8c 93       	st	X, r24
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	8d ab       	std	Y+53, r24	; 0x35
    202a:	9e ab       	std	Y+54, r25	; 0x36
    202c:	af ab       	std	Y+55, r26	; 0x37
    202e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6d a9       	ldd	r22, Y+53	; 0x35
    2032:	7e a9       	ldd	r23, Y+54	; 0x36
    2034:	8f a9       	ldd	r24, Y+55	; 0x37
    2036:	98 ad       	ldd	r25, Y+56	; 0x38
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	89 ab       	std	Y+49, r24	; 0x31
    204a:	9a ab       	std	Y+50, r25	; 0x32
    204c:	ab ab       	std	Y+51, r26	; 0x33
    204e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	98 ab       	std	Y+48, r25	; 0x30
    206e:	8f a7       	std	Y+47, r24	; 0x2f
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6d a9       	ldd	r22, Y+53	; 0x35
    208c:	7e a9       	ldd	r23, Y+54	; 0x36
    208e:	8f a9       	ldd	r24, Y+55	; 0x37
    2090:	98 ad       	ldd	r25, Y+56	; 0x38
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	98 ab       	std	Y+48, r25	; 0x30
    20b0:	8f a7       	std	Y+47, r24	; 0x2f
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <LCD_displayCharacter+0x4fe>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e a7       	std	Y+46, r25	; 0x2e
    20ba:	8d a7       	std	Y+45, r24	; 0x2d
    20bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    20be:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_displayCharacter+0x4ec>
    20c4:	9e a7       	std	Y+46, r25	; 0x2e
    20c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ca:	98 a9       	ldd	r25, Y+48	; 0x30
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	98 ab       	std	Y+48, r25	; 0x30
    20d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d4:	98 a9       	ldd	r25, Y+48	; 0x30
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <LCD_displayCharacter+0x4e0>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	69 a9       	ldd	r22, Y+49	; 0x31
    20de:	7a a9       	ldd	r23, Y+50	; 0x32
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
    20f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f2:	98 a9       	ldd	r25, Y+48	; 0x30
    20f4:	9c a7       	std	Y+44, r25	; 0x2c
    20f6:	8b a7       	std	Y+43, r24	; 0x2b
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_displayCharacter+0x528>
    2100:	9c a7       	std	Y+44, r25	; 0x2c
    2102:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2104:	a2 e3       	ldi	r26, 0x32	; 50
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e2 e3       	ldi	r30, 0x32	; 50
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	80 64       	ori	r24, 0x40	; 64
    2110:	8c 93       	st	X, r24
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8f a3       	std	Y+39, r24	; 0x27
    211c:	98 a7       	std	Y+40, r25	; 0x28
    211e:	a9 a7       	std	Y+41, r26	; 0x29
    2120:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6f a1       	ldd	r22, Y+39	; 0x27
    2124:	78 a5       	ldd	r23, Y+40	; 0x28
    2126:	89 a5       	ldd	r24, Y+41	; 0x29
    2128:	9a a5       	ldd	r25, Y+42	; 0x2a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8b a3       	std	Y+35, r24	; 0x23
    213c:	9c a3       	std	Y+36, r25	; 0x24
    213e:	ad a3       	std	Y+37, r26	; 0x25
    2140:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2142:	6b a1       	ldd	r22, Y+35	; 0x23
    2144:	7c a1       	ldd	r23, Y+36	; 0x24
    2146:	8d a1       	ldd	r24, Y+37	; 0x25
    2148:	9e a1       	ldd	r25, Y+38	; 0x26
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_displayCharacter+0x590>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	8d a1       	ldd	r24, Y+37	; 0x25
    216a:	9e a1       	ldd	r25, Y+38	; 0x26
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6f a1       	ldd	r22, Y+39	; 0x27
    217e:	78 a5       	ldd	r23, Y+40	; 0x28
    2180:	89 a5       	ldd	r24, Y+41	; 0x29
    2182:	9a a5       	ldd	r25, Y+42	; 0x2a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_displayCharacter+0x5f0>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	8f 8f       	std	Y+31, r24	; 0x1f
    21ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b0:	98 a1       	ldd	r25, Y+32	; 0x20
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_displayCharacter+0x5de>
    21b6:	98 a3       	std	Y+32, r25	; 0x20
    21b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	89 a1       	ldd	r24, Y+33	; 0x21
    21bc:	9a a1       	ldd	r25, Y+34	; 0x22
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_displayCharacter+0x5d2>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6b a1       	ldd	r22, Y+35	; 0x23
    21d0:	7c a1       	ldd	r23, Y+36	; 0x24
    21d2:	8d a1       	ldd	r24, Y+37	; 0x25
    21d4:	9e a1       	ldd	r25, Y+38	; 0x26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9a a3       	std	Y+34, r25	; 0x22
    21e0:	89 a3       	std	Y+33, r24	; 0x21
    21e2:	89 a1       	ldd	r24, Y+33	; 0x21
    21e4:	9a a1       	ldd	r25, Y+34	; 0x22
    21e6:	9e 8f       	std	Y+30, r25	; 0x1e
    21e8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_displayCharacter+0x61a>
    21f2:	9e 8f       	std	Y+30, r25	; 0x1e
    21f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    21f6:	a8 e3       	ldi	r26, 0x38	; 56
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e8 e3       	ldi	r30, 0x38	; 56
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	28 2f       	mov	r18, r24
    2202:	2f 70       	andi	r18, 0x0F	; 15
    2204:	fe 01       	movw	r30, r28
    2206:	ed 59       	subi	r30, 0x9D	; 157
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	88 2f       	mov	r24, r24
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	82 95       	swap	r24
    2212:	92 95       	swap	r25
    2214:	90 7f       	andi	r25, 0xF0	; 240
    2216:	98 27       	eor	r25, r24
    2218:	80 7f       	andi	r24, 0xF0	; 240
    221a:	98 27       	eor	r25, r24
    221c:	82 2b       	or	r24, r18
    221e:	8c 93       	st	X, r24
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e8       	ldi	r26, 0x80	; 128
    2226:	bf e3       	ldi	r27, 0x3F	; 63
    2228:	89 8f       	std	Y+25, r24	; 0x19
    222a:	9a 8f       	std	Y+26, r25	; 0x1a
    222c:	ab 8f       	std	Y+27, r26	; 0x1b
    222e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	69 8d       	ldd	r22, Y+25	; 0x19
    2232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a ef       	ldi	r20, 0xFA	; 250
    223e:	54 e4       	ldi	r21, 0x44	; 68
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8d 8b       	std	Y+21, r24	; 0x15
    224a:	9e 8b       	std	Y+22, r25	; 0x16
    224c:	af 8b       	std	Y+23, r26	; 0x17
    224e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2250:	6d 89       	ldd	r22, Y+21	; 0x15
    2252:	7e 89       	ldd	r23, Y+22	; 0x16
    2254:	8f 89       	ldd	r24, Y+23	; 0x17
    2256:	98 8d       	ldd	r25, Y+24	; 0x18
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	69 8d       	ldd	r22, Y+25	; 0x19
    228c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9c 8b       	std	Y+20, r25	; 0x14
    22b0:	8b 8b       	std	Y+19, r24	; 0x13
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <LCD_displayCharacter+0x6fe>
    22b4:	88 ec       	ldi	r24, 0xC8	; 200
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9a 8b       	std	Y+18, r25	; 0x12
    22ba:	89 8b       	std	Y+17, r24	; 0x11
    22bc:	89 89       	ldd	r24, Y+17	; 0x11
    22be:	9a 89       	ldd	r25, Y+18	; 0x12
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_displayCharacter+0x6ec>
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <LCD_displayCharacter+0x6e0>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9c 8b       	std	Y+20, r25	; 0x14
    22ee:	8b 8b       	std	Y+19, r24	; 0x13
    22f0:	8b 89       	ldd	r24, Y+19	; 0x13
    22f2:	9c 89       	ldd	r25, Y+20	; 0x14
    22f4:	98 8b       	std	Y+16, r25	; 0x10
    22f6:	8f 87       	std	Y+15, r24	; 0x0f
    22f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fa:	98 89       	ldd	r25, Y+16	; 0x10
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_displayCharacter+0x728>
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2304:	a2 e3       	ldi	r26, 0x32	; 50
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e2 e3       	ldi	r30, 0x32	; 50
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 7b       	andi	r24, 0xBF	; 191
    2310:	8c 93       	st	X, r24
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8f 83       	std	Y+7, r24	; 0x07
    233c:	98 87       	std	Y+8, r25	; 0x08
    233e:	a9 87       	std	Y+9, r26	; 0x09
    2340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_displayCharacter+0x790>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_displayCharacter+0x7f0>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_displayCharacter+0x7de>
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_displayCharacter+0x7d2>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_displayCharacter+0x81a>
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23f6:	cd 59       	subi	r28, 0x9D	; 157
    23f8:	df 4f       	sbci	r29, 0xFF	; 255
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	08 95       	ret

0000240e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_displayString+0x6>
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9b 83       	std	Y+3, r25	; 0x03
    241c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    241e:	19 82       	std	Y+1, r1	; 0x01
    2420:	0e c0       	rjmp	.+28     	; 0x243e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	9b 81       	ldd	r25, Y+3	; 0x03
    242c:	fc 01       	movw	r30, r24
    242e:	e2 0f       	add	r30, r18
    2430:	f3 1f       	adc	r31, r19
    2432:	80 81       	ld	r24, Z
    2434:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayCharacter>
		i++;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	fc 01       	movw	r30, r24
    244a:	e2 0f       	add	r30, r18
    244c:	f3 1f       	adc	r31, r19
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	39 f7       	brne	.-50     	; 0x2422 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <LCD_goToRowColumn+0x6>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <LCD_goToRowColumn+0x8>
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	8a 83       	std	Y+2, r24	; 0x02
    2470:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	3d 83       	std	Y+5, r19	; 0x05
    247a:	2c 83       	std	Y+4, r18	; 0x04
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	91 05       	cpc	r25, r1
    2484:	c1 f0       	breq	.+48     	; 0x24b6 <LCD_goToRowColumn+0x56>
    2486:	2c 81       	ldd	r18, Y+4	; 0x04
    2488:	3d 81       	ldd	r19, Y+5	; 0x05
    248a:	22 30       	cpi	r18, 0x02	; 2
    248c:	31 05       	cpc	r19, r1
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_goToRowColumn+0x3a>
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	9d 81       	ldd	r25, Y+5	; 0x05
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	61 f0       	breq	.+24     	; 0x24b0 <LCD_goToRowColumn+0x50>
    2498:	19 c0       	rjmp	.+50     	; 0x24cc <LCD_goToRowColumn+0x6c>
    249a:	2c 81       	ldd	r18, Y+4	; 0x04
    249c:	3d 81       	ldd	r19, Y+5	; 0x05
    249e:	22 30       	cpi	r18, 0x02	; 2
    24a0:	31 05       	cpc	r19, r1
    24a2:	69 f0       	breq	.+26     	; 0x24be <LCD_goToRowColumn+0x5e>
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	9d 81       	ldd	r25, Y+5	; 0x05
    24a8:	83 30       	cpi	r24, 0x03	; 3
    24aa:	91 05       	cpc	r25, r1
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <LCD_goToRowColumn+0x66>
    24ae:	0e c0       	rjmp	.+28     	; 0x24cc <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	0b c0       	rjmp	.+22     	; 0x24cc <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	80 5c       	subi	r24, 0xC0	; 192
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	07 c0       	rjmp	.+14     	; 0x24cc <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	80 5f       	subi	r24, 0xF0	; 240
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	80 5b       	subi	r24, 0xB0	; 176
    24ca:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <LCD_displayStringRowColumn+0x6>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <LCD_displayStringRowColumn+0x8>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02
    24f4:	5c 83       	std	Y+4, r21	; 0x04
    24f6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	6a 81       	ldd	r22, Y+2	; 0x02
    24fc:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_displayString>
}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	62 97       	sbiw	r28, 0x12	; 18
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	9a 89       	ldd	r25, Y+18	; 0x12
    2532:	9e 01       	movw	r18, r28
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	b9 01       	movw	r22, r18
    253a:	4a e0       	ldi	r20, 0x0A	; 10
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	0e 94 08 14 	call	0x2810	; 0x2810 <itoa>
   LCD_displayString(buff);
    2542:	ce 01       	movw	r24, r28
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	0e 94 07 12 	call	0x240e	; 0x240e <LCD_displayString>
}
    254a:	62 96       	adiw	r28, 0x12	; 18
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	0e 94 cd 09 	call	0x139a	; 0x139a <LCD_sendCommand>
}
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <timer0_init_CTC_mode>:

uint8 g_tick;
uint8 g_flag = 0;
uint8 g_sec ;

void timer0_init_CTC_mode(void) {
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	SREG  |= (1<<7);
    2578:	af e5       	ldi	r26, 0x5F	; 95
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ef e5       	ldi	r30, 0x5F	; 95
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	80 68       	ori	r24, 0x80	; 128
    2584:	8c 93       	st	X, r24
	TCNT0 = 0; //timer initial value
    2586:	e2 e5       	ldi	r30, 0x52	; 82
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	10 82       	st	Z, r1
	OCR0 = 250; //compare value
    258c:	ec e5       	ldi	r30, 0x5C	; 92
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	8a ef       	ldi	r24, 0xFA	; 250
    2592:	80 83       	st	Z, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	SET_BIT(TIMSK, OCIE0);
    2594:	a9 e5       	ldi	r26, 0x59	; 89
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e9 e5       	ldi	r30, 0x59	; 89
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	82 60       	ori	r24, 0x02	; 2
    25a0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, FOC0);
    25a2:	a3 e5       	ldi	r26, 0x53	; 83
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e3 e5       	ldi	r30, 0x53	; 83
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 68       	ori	r24, 0x80	; 128
    25ae:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    25b0:	a3 e5       	ldi	r26, 0x53	; 83
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e3 e5       	ldi	r30, 0x53	; 83
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	88 60       	ori	r24, 0x08	; 8
    25bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    25be:	a3 e5       	ldi	r26, 0x53	; 83
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e3 e5       	ldi	r30, 0x53	; 83
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	84 60       	ori	r24, 0x04	; 4
    25ca:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
    25cc:	a3 e5       	ldi	r26, 0x53	; 83
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e3 e5       	ldi	r30, 0x53	; 83
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	81 60       	ori	r24, 0x01	; 1
    25d8:	8c 93       	st	X, r24
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <__vector_19>:

ISR(TIMER0_COMP_vect) {
    25e0:	1f 92       	push	r1
    25e2:	0f 92       	push	r0
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	0f 92       	push	r0
    25e8:	11 24       	eor	r1, r1
    25ea:	8f 93       	push	r24
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    25f4:	80 91 9e 00 	lds	r24, 0x009E
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	80 93 9e 00 	sts	0x009E, r24
	if(g_tick == TICKS_TO_COUNT_SEC){
    25fe:	80 91 9e 00 	lds	r24, 0x009E
    2602:	80 32       	cpi	r24, 0x20	; 32
    2604:	39 f4       	brne	.+14     	; 0x2614 <__vector_19+0x34>
		g_sec ++ ;
    2606:	80 91 9d 00 	lds	r24, 0x009D
    260a:	8f 5f       	subi	r24, 0xFF	; 255
    260c:	80 93 9d 00 	sts	0x009D, r24
		g_tick =0 ;
    2610:	10 92 9e 00 	sts	0x009E, r1
	}
}
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	8f 91       	pop	r24
    261a:	0f 90       	pop	r0
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	0f 90       	pop	r0
    2620:	1f 90       	pop	r1
    2622:	18 95       	reti

00002624 <Count_sec>:

void Count_sec(uint8 no_of_sec) {
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	0f 92       	push	r0
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01

	timer0_init_CTC_mode();
    2630:	0e 94 b8 12 	call	0x2570	; 0x2570 <timer0_init_CTC_mode>
	while (g_sec < no_of_sec){
    2634:	90 91 9d 00 	lds	r25, 0x009D
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	98 17       	cp	r25, r24
    263c:	d8 f3       	brcs	.-10     	; 0x2634 <Count_sec+0x10>

	}
	g_sec =0 ;
    263e:	10 92 9d 00 	sts	0x009D, r1
}
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2652:	eb e2       	ldi	r30, 0x2B	; 43
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    265a:	ea e2       	ldi	r30, 0x2A	; 42
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	88 e1       	ldi	r24, 0x18	; 24
    2660:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2662:	e0 e4       	ldi	r30, 0x40	; 64
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	86 e8       	ldi	r24, 0x86	; 134
    2668:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    266a:	e0 e4       	ldi	r30, 0x40	; 64
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2670:	e9 e2       	ldi	r30, 0x29	; 41
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	87 e6       	ldi	r24, 0x67	; 103
    2676:	80 83       	st	Z, r24
}
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	0f 92       	push	r0
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    268a:	eb e2       	ldi	r30, 0x2B	; 43
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	80 72       	andi	r24, 0x20	; 32
    2696:	90 70       	andi	r25, 0x00	; 0
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	b9 f3       	breq	.-18     	; 0x268a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    269c:	ec e2       	ldi	r30, 0x2C	; 44
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26b4:	eb e2       	ldi	r30, 0x2B	; 43
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	88 23       	and	r24, r24
    26bc:	dc f7       	brge	.-10     	; 0x26b4 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    26be:	ec e2       	ldi	r30, 0x2C	; 44
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <UART_sendString+0x6>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	9b 83       	std	Y+3, r25	; 0x03
    26d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	0e c0       	rjmp	.+28     	; 0x26fa <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	fc 01       	movw	r30, r24
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	80 81       	ld	r24, Z
    26f0:	0e 94 3f 13 	call	0x267e	; 0x267e <UART_sendByte>
		i++;
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	9b 81       	ldd	r25, Y+3	; 0x03
    2704:	fc 01       	movw	r30, r24
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	80 81       	ld	r24, Z
    270c:	88 23       	and	r24, r24
    270e:	39 f7       	brne	.-50     	; 0x26de <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <UART_receiveString+0xa>
    2726:	0f 92       	push	r0
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9b 83       	std	Y+3, r25	; 0x03
    272e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2730:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	8c 01       	movw	r16, r24
    273e:	02 0f       	add	r16, r18
    2740:	13 1f       	adc	r17, r19
    2742:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_recieveByte>
    2746:	f8 01       	movw	r30, r16
    2748:	80 83       	st	Z, r24
    274a:	0f c0       	rjmp	.+30     	; 0x276a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	8c 01       	movw	r16, r24
    275e:	02 0f       	add	r16, r18
    2760:	13 1f       	adc	r17, r19
    2762:	0e 94 56 13 	call	0x26ac	; 0x26ac <UART_recieveByte>
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	fc 01       	movw	r30, r24
    2776:	e2 0f       	add	r30, r18
    2778:	f3 1f       	adc	r31, r19
    277a:	80 81       	ld	r24, Z
    277c:	83 32       	cpi	r24, 0x23	; 35
    277e:	31 f7       	brne	.-52     	; 0x274c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	fc 01       	movw	r30, r24
    278c:	e2 0f       	add	r30, r18
    278e:	f3 1f       	adc	r31, r19
    2790:	10 82       	st	Z, r1
}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	08 95       	ret

000027a2 <__prologue_saves__>:
    27a2:	2f 92       	push	r2
    27a4:	3f 92       	push	r3
    27a6:	4f 92       	push	r4
    27a8:	5f 92       	push	r5
    27aa:	6f 92       	push	r6
    27ac:	7f 92       	push	r7
    27ae:	8f 92       	push	r8
    27b0:	9f 92       	push	r9
    27b2:	af 92       	push	r10
    27b4:	bf 92       	push	r11
    27b6:	cf 92       	push	r12
    27b8:	df 92       	push	r13
    27ba:	ef 92       	push	r14
    27bc:	ff 92       	push	r15
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	ca 1b       	sub	r28, r26
    27cc:	db 0b       	sbc	r29, r27
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	09 94       	ijmp

000027da <__epilogue_restores__>:
    27da:	2a 88       	ldd	r2, Y+18	; 0x12
    27dc:	39 88       	ldd	r3, Y+17	; 0x11
    27de:	48 88       	ldd	r4, Y+16	; 0x10
    27e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    27e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    27e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    27e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    27e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ec:	b9 84       	ldd	r11, Y+9	; 0x09
    27ee:	c8 84       	ldd	r12, Y+8	; 0x08
    27f0:	df 80       	ldd	r13, Y+7	; 0x07
    27f2:	ee 80       	ldd	r14, Y+6	; 0x06
    27f4:	fd 80       	ldd	r15, Y+5	; 0x05
    27f6:	0c 81       	ldd	r16, Y+4	; 0x04
    27f8:	1b 81       	ldd	r17, Y+3	; 0x03
    27fa:	aa 81       	ldd	r26, Y+2	; 0x02
    27fc:	b9 81       	ldd	r27, Y+1	; 0x01
    27fe:	ce 0f       	add	r28, r30
    2800:	d1 1d       	adc	r29, r1
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	ed 01       	movw	r28, r26
    280e:	08 95       	ret

00002810 <itoa>:
    2810:	fb 01       	movw	r30, r22
    2812:	9f 01       	movw	r18, r30
    2814:	e8 94       	clt
    2816:	42 30       	cpi	r20, 0x02	; 2
    2818:	c4 f0       	brlt	.+48     	; 0x284a <itoa+0x3a>
    281a:	45 32       	cpi	r20, 0x25	; 37
    281c:	b4 f4       	brge	.+44     	; 0x284a <itoa+0x3a>
    281e:	4a 30       	cpi	r20, 0x0A	; 10
    2820:	29 f4       	brne	.+10     	; 0x282c <itoa+0x1c>
    2822:	97 fb       	bst	r25, 7
    2824:	1e f4       	brtc	.+6      	; 0x282c <itoa+0x1c>
    2826:	90 95       	com	r25
    2828:	81 95       	neg	r24
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	64 2f       	mov	r22, r20
    282e:	77 27       	eor	r23, r23
    2830:	0e 94 39 14 	call	0x2872	; 0x2872 <__udivmodhi4>
    2834:	80 5d       	subi	r24, 0xD0	; 208
    2836:	8a 33       	cpi	r24, 0x3A	; 58
    2838:	0c f0       	brlt	.+2      	; 0x283c <itoa+0x2c>
    283a:	89 5d       	subi	r24, 0xD9	; 217
    283c:	81 93       	st	Z+, r24
    283e:	cb 01       	movw	r24, r22
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	a1 f7       	brne	.-24     	; 0x282c <itoa+0x1c>
    2844:	16 f4       	brtc	.+4      	; 0x284a <itoa+0x3a>
    2846:	5d e2       	ldi	r21, 0x2D	; 45
    2848:	51 93       	st	Z+, r21
    284a:	10 82       	st	Z, r1
    284c:	c9 01       	movw	r24, r18
    284e:	0c 94 29 14 	jmp	0x2852	; 0x2852 <strrev>

00002852 <strrev>:
    2852:	dc 01       	movw	r26, r24
    2854:	fc 01       	movw	r30, r24
    2856:	67 2f       	mov	r22, r23
    2858:	71 91       	ld	r23, Z+
    285a:	77 23       	and	r23, r23
    285c:	e1 f7       	brne	.-8      	; 0x2856 <strrev+0x4>
    285e:	32 97       	sbiw	r30, 0x02	; 2
    2860:	04 c0       	rjmp	.+8      	; 0x286a <strrev+0x18>
    2862:	7c 91       	ld	r23, X
    2864:	6d 93       	st	X+, r22
    2866:	70 83       	st	Z, r23
    2868:	62 91       	ld	r22, -Z
    286a:	ae 17       	cp	r26, r30
    286c:	bf 07       	cpc	r27, r31
    286e:	c8 f3       	brcs	.-14     	; 0x2862 <strrev+0x10>
    2870:	08 95       	ret

00002872 <__udivmodhi4>:
    2872:	aa 1b       	sub	r26, r26
    2874:	bb 1b       	sub	r27, r27
    2876:	51 e1       	ldi	r21, 0x11	; 17
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <__udivmodhi4_ep>

0000287a <__udivmodhi4_loop>:
    287a:	aa 1f       	adc	r26, r26
    287c:	bb 1f       	adc	r27, r27
    287e:	a6 17       	cp	r26, r22
    2880:	b7 07       	cpc	r27, r23
    2882:	10 f0       	brcs	.+4      	; 0x2888 <__udivmodhi4_ep>
    2884:	a6 1b       	sub	r26, r22
    2886:	b7 0b       	sbc	r27, r23

00002888 <__udivmodhi4_ep>:
    2888:	88 1f       	adc	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	5a 95       	dec	r21
    288e:	a9 f7       	brne	.-22     	; 0x287a <__udivmodhi4_loop>
    2890:	80 95       	com	r24
    2892:	90 95       	com	r25
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	08 95       	ret

0000289a <_exit>:
    289a:	f8 94       	cli

0000289c <__stop_program>:
    289c:	ff cf       	rjmp	.-2      	; 0x289c <__stop_program>
