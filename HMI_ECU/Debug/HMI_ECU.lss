
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000ee  008000ee  00002f56  2**0
                  ALLOC
  3 .stab         00002a48  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec4  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000875d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ee       	ldi	r26, 0xE6	; 230
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 ee       	ldi	r24, 0xE6	; 230
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*Structure to hold the PW values of the HMI ECU*/
Password_ConfigType PassWord_Configuration_HMI;

/*-------------------------Function Definitions-------------------------*/

int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a3 97       	sbiw	r28, 0x23	; 35
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/*Init_Func to Initiate the system of the ECU*/
	Init_Fun();
     b5a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Init_Fun>


	/*Get Password from the user and Checking it */
	Get_Password(&PassWord_Configuration_HMI);
     b5e:	8e ee       	ldi	r24, 0xEE	; 238
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 07 07 	call	0xe0e	; 0xe0e <Get_Password>


	/*After Getting a checked PW , Send it to the Ctrl ECU*/
	SendPassword(&PassWord_Configuration_HMI);
     b66:	8e ee       	ldi	r24, 0xEE	; 238
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 a0 08 	call	0x1140	; 0x1140 <SendPassword>

		/*Show to the user the options of the system
				 * on a LCD to choose an action to be transfered to
				 * the Ctrl ECU and be performed
				 * */
		Menu();
     b6e:	0e 94 c1 08 	call	0x1182	; 0x1182 <Menu>

		/*Take the action from keypad and stored it in
				 * a variable*/
		g_Menu_Option = KeyPad_getPressedKey();
     b72:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
     b76:	80 93 f8 00 	sts	0x00F8, r24
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a8 e4       	ldi	r26, 0x48	; 72
     b80:	b3 e4       	ldi	r27, 0x43	; 67
     b82:	89 8f       	std	Y+25, r24	; 0x19
     b84:	9a 8f       	std	Y+26, r25	; 0x1a
     b86:	ab 8f       	std	Y+27, r26	; 0x1b
     b88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	69 8d       	ldd	r22, Y+25	; 0x19
     b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a ef       	ldi	r20, 0xFA	; 250
     b98:	54 e4       	ldi	r21, 0x44	; 68
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8d 8b       	std	Y+21, r24	; 0x15
     ba4:	9e 8b       	std	Y+22, r25	; 0x16
     ba6:	af 8b       	std	Y+23, r26	; 0x17
     ba8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     baa:	6d 89       	ldd	r22, Y+21	; 0x15
     bac:	7e 89       	ldd	r23, Y+22	; 0x16
     bae:	8f 89       	ldd	r24, Y+23	; 0x17
     bb0:	98 8d       	ldd	r25, Y+24	; 0x18
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <main+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9c 8b       	std	Y+20, r25	; 0x14
     bc8:	8b 8b       	std	Y+19, r24	; 0x13
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <main+0x104>
	else if (__tmp > 65535)
     bcc:	6d 89       	ldd	r22, Y+21	; 0x15
     bce:	7e 89       	ldd	r23, Y+22	; 0x16
     bd0:	8f 89       	ldd	r24, Y+23	; 0x17
     bd2:	98 8d       	ldd	r25, Y+24	; 0x18
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	69 8d       	ldd	r22, Y+25	; 0x19
     be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9c 8b       	std	Y+20, r25	; 0x14
     c0a:	8b 8b       	std	Y+19, r24	; 0x13
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <main+0xe6>
     c0e:	88 ec       	ldi	r24, 0xC8	; 200
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9a 8b       	std	Y+18, r25	; 0x12
     c14:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	89 89       	ldd	r24, Y+17	; 0x11
     c18:	9a 89       	ldd	r25, Y+18	; 0x12
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <main+0xd4>
     c1e:	9a 8b       	std	Y+18, r25	; 0x12
     c20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8b 89       	ldd	r24, Y+19	; 0x13
     c24:	9c 89       	ldd	r25, Y+20	; 0x14
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9c 8b       	std	Y+20, r25	; 0x14
     c2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8b 89       	ldd	r24, Y+19	; 0x13
     c2e:	9c 89       	ldd	r25, Y+20	; 0x14
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <main+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	6d 89       	ldd	r22, Y+21	; 0x15
     c38:	7e 89       	ldd	r23, Y+22	; 0x16
     c3a:	8f 89       	ldd	r24, Y+23	; 0x17
     c3c:	98 8d       	ldd	r25, Y+24	; 0x18
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9c 8b       	std	Y+20, r25	; 0x14
     c48:	8b 8b       	std	Y+19, r24	; 0x13
     c4a:	8b 89       	ldd	r24, Y+19	; 0x13
     c4c:	9c 89       	ldd	r25, Y+20	; 0x14
     c4e:	98 8b       	std	Y+16, r25	; 0x10
     c50:	8f 87       	std	Y+15, r24	; 0x0f
     c52:	8f 85       	ldd	r24, Y+15	; 0x0f
     c54:	98 89       	ldd	r25, Y+16	; 0x10
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <main+0x110>
     c5a:	98 8b       	std	Y+16, r25	; 0x10
     c5c:	8f 87       	std	Y+15, r24	; 0x0f
		uint8 loop_Checking_1;
		uint8 loop_Checking_2;



		if (Option_Select(g_Menu_Option) == FALSE) {
     c5e:	80 91 f8 00 	lds	r24, 0x00F8
     c62:	0e 94 a5 09 	call	0x134a	; 0x134a <Option_Select>
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <main+0x126>
     c6a:	81 cf       	rjmp	.-254    	; 0xb6e <main+0x28>
			/*Do Nothing and Return to Menu*/
		}

		else if (Option_Select(g_Menu_Option) == CHANGE_PASSWORD) {
     c6c:	80 91 f8 00 	lds	r24, 0x00F8
     c70:	0e 94 a5 09 	call	0x134a	; 0x134a <Option_Select>
     c74:	87 30       	cpi	r24, 0x07	; 7
     c76:	09 f0       	breq	.+2      	; 0xc7a <main+0x134>
     c78:	97 c0       	rjmp	.+302    	; 0xda8 <main+0x262>
			uint8 Attemps;
			do {
				/*Send to the ECU_2 Password change Request*/
				/*Request from the user the password and send it
				 * to Ctrl ECU */
				Change_PW_ECU1();
     c7a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <Change_PW_ECU1>

				uint8 check_status = UART_recieveByte();
     c7e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_recieveByte>
     c82:	88 a3       	std	Y+32, r24	; 0x20

				if (check_status == TRUE) {
     c84:	88 a1       	ldd	r24, Y+32	; 0x20
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	09 f0       	breq	.+2      	; 0xc8c <main+0x146>
     c8a:	81 c0       	rjmp	.+258    	; 0xd8e <main+0x248>

					Get_Password(&PassWord_Configuration_HMI);
     c8c:	8e ee       	ldi	r24, 0xEE	; 238
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	0e 94 07 07 	call	0xe0e	; 0xe0e <Get_Password>
					/*Send The Password to ECU_2 */
					SendPassword(&PassWord_Configuration_HMI);
     c94:	8e ee       	ldi	r24, 0xEE	; 238
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 a0 08 	call	0x1140	; 0x1140 <SendPassword>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	a8 e4       	ldi	r26, 0x48	; 72
     ca2:	b3 e4       	ldi	r27, 0x43	; 67
     ca4:	8b 87       	std	Y+11, r24	; 0x0b
     ca6:	9c 87       	std	Y+12, r25	; 0x0c
     ca8:	ad 87       	std	Y+13, r26	; 0x0d
     caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cac:	6b 85       	ldd	r22, Y+11	; 0x0b
     cae:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	4a ef       	ldi	r20, 0xFA	; 250
     cba:	54 e4       	ldi	r21, 0x44	; 68
     cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	8f 83       	std	Y+7, r24	; 0x07
     cc6:	98 87       	std	Y+8, r25	; 0x08
     cc8:	a9 87       	std	Y+9, r26	; 0x09
     cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ccc:	6f 81       	ldd	r22, Y+7	; 0x07
     cce:	78 85       	ldd	r23, Y+8	; 0x08
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce0:	88 23       	and	r24, r24
     ce2:	2c f4       	brge	.+10     	; 0xcee <main+0x1a8>
		__ticks = 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9e 83       	std	Y+6, r25	; 0x06
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	3f c0       	rjmp	.+126    	; 0xd6c <main+0x226>
	else if (__tmp > 65535)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	4f e7       	ldi	r20, 0x7F	; 127
     cfc:	57 e4       	ldi	r21, 0x47	; 71
     cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d02:	18 16       	cp	r1, r24
     d04:	4c f5       	brge	.+82     	; 0xd58 <main+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d06:	6b 85       	ldd	r22, Y+11	; 0x0b
     d08:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e2       	ldi	r20, 0x20	; 32
     d14:	51 e4       	ldi	r21, 0x41	; 65
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9e 83       	std	Y+6, r25	; 0x06
     d2c:	8d 83       	std	Y+5, r24	; 0x05
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <main+0x208>
     d30:	88 ec       	ldi	r24, 0xC8	; 200
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <main+0x1f6>
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9e 83       	std	Y+6, r25	; 0x06
     d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	9e 81       	ldd	r25, Y+6	; 0x06
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	69 f7       	brne	.-38     	; 0xd30 <main+0x1ea>
     d56:	14 c0       	rjmp	.+40     	; 0xd80 <main+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <main+0x232>
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					MSG("PW is Changed");
     d80:	80 e6       	ldi	r24, 0x60	; 96
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 8d 0a 	call	0x151a	; 0x151a <MSG>
					loop_Checking_1 = TRUE;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	8b a3       	std	Y+35, r24	; 0x23
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <main+0x250>

				} else {
					loop_Checking_1 = FALSE;
     d8e:	1b a2       	std	Y+35, r1	; 0x23
					Attemps++;
     d90:	89 a1       	ldd	r24, Y+33	; 0x21
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	89 a3       	std	Y+33, r24	; 0x21
				}

				/*Make the user to re-enter the password
				 * only Three times , after that ,
				 * Return to main menu*/
			} while (loop_Checking_1 == FALSE && Attemps < 3);
     d96:	8b a1       	ldd	r24, Y+35	; 0x23
     d98:	88 23       	and	r24, r24
     d9a:	21 f4       	brne	.+8      	; 0xda4 <main+0x25e>
     d9c:	89 a1       	ldd	r24, Y+33	; 0x21
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	08 f4       	brcc	.+2      	; 0xda4 <main+0x25e>
     da2:	6b cf       	rjmp	.-298    	; 0xc7a <main+0x134>

			Attemps = 0;
     da4:	19 a2       	std	Y+33, r1	; 0x21
     da6:	e3 ce       	rjmp	.-570    	; 0xb6e <main+0x28>
		}

		else if (Option_Select(g_Menu_Option) == OPEN_DOOR) {
     da8:	80 91 f8 00 	lds	r24, 0x00F8
     dac:	0e 94 a5 09 	call	0x134a	; 0x134a <Option_Select>
     db0:	80 31       	cpi	r24, 0x10	; 16
     db2:	09 f0       	breq	.+2      	; 0xdb6 <main+0x270>
     db4:	dc ce       	rjmp	.-584    	; 0xb6e <main+0x28>
				/*Request from the user the password and send it
				 * to Ctrl ECU */

				/*Take password and send password & open_door
				 * command to the Ctrl ECU */
				Oped_door_ECU1();
     db6:	0e 94 be 09 	call	0x137c	; 0x137c <Oped_door_ECU1>

				uint8 check_status = UART_recieveByte();
     dba:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_recieveByte>
     dbe:	8e 8f       	std	Y+30, r24	; 0x1e

				if (check_status == TRUE) {
     dc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	69 f4       	brne	.+26     	; 0xde0 <main+0x29a>

					MSG("Door UnLocking");
     dc6:	8e e6       	ldi	r24, 0x6E	; 110
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 8d 0a 	call	0x151a	; 0x151a <MSG>

					uint8 Motor_finish = UART_recieveByte();
     dce:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_recieveByte>
     dd2:	8d 8f       	std	Y+29, r24	; 0x1d


					/*This looping to make sure the motor finish
					 * its work first in the other ECU and then
					 * Go ahead to complete the code */
					while (Motor_finish != TRUE) {
     dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <main+0x28e>

					}

					loop_Checking_2 = TRUE;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	8a a3       	std	Y+34, r24	; 0x22
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <main+0x2a2>

				} else {
					loop_Checking_2 = FALSE;
     de0:	1a a2       	std	Y+34, r1	; 0x22
					Attemps++;
     de2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	8f 8f       	std	Y+31, r24	; 0x1f
				}
				/*Make the user to re-enter the password
								 * only Three times , after that ,
								 * Return to main menu*/
			} while (loop_Checking_2 == FALSE && Attemps < 3);
     de8:	8a a1       	ldd	r24, Y+34	; 0x22
     dea:	88 23       	and	r24, r24
     dec:	19 f4       	brne	.+6      	; 0xdf4 <main+0x2ae>
     dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	08 f3       	brcs	.-62     	; 0xdb6 <main+0x270>

			Attemps = 0;
     df4:	1f 8e       	std	Y+31, r1	; 0x1f
     df6:	bb ce       	rjmp	.-650    	; 0xb6e <main+0x28>

00000df8 <Init_Fun>:
 * Return value: void
 * Description: Initiate the system
 *            - Initiate LCD
 *            - Initiate UART
 ************************************************************************************/
void Init_Fun(void) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62

	LCD_init();
     e00:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <LCD_init>
	UART_init();
     e04:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <UART_init>

}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <Get_Password>:
 * Description: Get Password from the user and make check to it
 * It make sure that password == to its checking
 * If not , FUnction asks the user to enter the Password again

 ************************************************************************************/
void Get_Password(Password_ConfigType * Password_Config) {
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	a2 97       	sbiw	r28, 0x22	; 34
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	9a a3       	std	Y+34, r25	; 0x22
     e24:	89 a3       	std	Y+33, r24	; 0x21

	uint8 Counter_1 = 0;
     e26:	18 a2       	std	Y+32, r1	; 0x20
	uint8 Counter_2 = 0;
     e28:	1f 8e       	std	Y+31, r1	; 0x1f
	LCD_clearScreen();
     e2a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("Please, Enter");
     e36:	8d e7       	ldi	r24, 0x7D	; 125
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("New PASSWORD");
     e46:	8b e8       	ldi	r24, 0x8B	; 139
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(2, 0);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
     e56:	89 c0       	rjmp	.+274    	; 0xf6a <Get_Password+0x15c>

	while (Counter_1 < PASSWORD_SIZE) {

		uint8 Key = KeyPad_getPressedKey();
     e58:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
     e5c:	8e 8f       	std	Y+30, r24	; 0x1e

		if (Key >= 0 && Key <= 9) {
     e5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e60:	8a 30       	cpi	r24, 0x0A	; 10
     e62:	08 f0       	brcs	.+2      	; 0xe66 <Get_Password+0x58>
     e64:	82 c0       	rjmp	.+260    	; 0xf6a <Get_Password+0x15c>

			Password_Config->Password[Counter_1] = Key;
     e66:	88 a1       	ldd	r24, Y+32	; 0x20
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	89 a1       	ldd	r24, Y+33	; 0x21
     e6e:	9a a1       	ldd	r25, Y+34	; 0x22
     e70:	fc 01       	movw	r30, r24
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e78:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     e7a:	8a e2       	ldi	r24, 0x2A	; 42
     e7c:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	af ea       	ldi	r26, 0xAF	; 175
     e86:	b3 e4       	ldi	r27, 0x43	; 67
     e88:	89 8f       	std	Y+25, r24	; 0x19
     e8a:	9a 8f       	std	Y+26, r25	; 0x1a
     e8c:	ab 8f       	std	Y+27, r26	; 0x1b
     e8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	69 8d       	ldd	r22, Y+25	; 0x19
     e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a ef       	ldi	r20, 0xFA	; 250
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8d 8b       	std	Y+21, r24	; 0x15
     eaa:	9e 8b       	std	Y+22, r25	; 0x16
     eac:	af 8b       	std	Y+23, r26	; 0x17
     eae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eb0:	6d 89       	ldd	r22, Y+21	; 0x15
     eb2:	7e 89       	ldd	r23, Y+22	; 0x16
     eb4:	8f 89       	ldd	r24, Y+23	; 0x17
     eb6:	98 8d       	ldd	r25, Y+24	; 0x18
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <Get_Password+0xc4>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c 8b       	std	Y+20, r25	; 0x14
     ece:	8b 8b       	std	Y+19, r24	; 0x13
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <Get_Password+0x142>
	else if (__tmp > 65535)
     ed2:	6d 89       	ldd	r22, Y+21	; 0x15
     ed4:	7e 89       	ldd	r23, Y+22	; 0x16
     ed6:	8f 89       	ldd	r24, Y+23	; 0x17
     ed8:	98 8d       	ldd	r25, Y+24	; 0x18
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <Get_Password+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	69 8d       	ldd	r22, Y+25	; 0x19
     eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <Get_Password+0x124>
     f14:	88 ec       	ldi	r24, 0xC8	; 200
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9a 8b       	std	Y+18, r25	; 0x12
     f1a:	89 8b       	std	Y+17, r24	; 0x11
     f1c:	89 89       	ldd	r24, Y+17	; 0x11
     f1e:	9a 89       	ldd	r25, Y+18	; 0x12
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <Get_Password+0x112>
     f24:	9a 8b       	std	Y+18, r25	; 0x12
     f26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	8b 89       	ldd	r24, Y+19	; 0x13
     f2a:	9c 89       	ldd	r25, Y+20	; 0x14
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9c 8b       	std	Y+20, r25	; 0x14
     f30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f7       	brne	.-38     	; 0xf14 <Get_Password+0x106>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <Get_Password+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	6d 89       	ldd	r22, Y+21	; 0x15
     f3e:	7e 89       	ldd	r23, Y+22	; 0x16
     f40:	8f 89       	ldd	r24, Y+23	; 0x17
     f42:	98 8d       	ldd	r25, Y+24	; 0x18
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9c 8b       	std	Y+20, r25	; 0x14
     f4e:	8b 8b       	std	Y+19, r24	; 0x13
     f50:	8b 89       	ldd	r24, Y+19	; 0x13
     f52:	9c 89       	ldd	r25, Y+20	; 0x14
     f54:	98 8b       	std	Y+16, r25	; 0x10
     f56:	8f 87       	std	Y+15, r24	; 0x0f
     f58:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5a:	98 89       	ldd	r25, Y+16	; 0x10
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <Get_Password+0x14e>
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(350);
			Counter_1++;
     f64:	88 a1       	ldd	r24, Y+32	; 0x20
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	88 a3       	std	Y+32, r24	; 0x20
	LCD_displayString("Please, Enter");
	LCD_goToRowColumn(1, 0);
	LCD_displayString("New PASSWORD");
	LCD_goToRowColumn(2, 0);

	while (Counter_1 < PASSWORD_SIZE) {
     f6a:	88 a1       	ldd	r24, Y+32	; 0x20
     f6c:	85 30       	cpi	r24, 0x05	; 5
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <Get_Password+0x164>
     f70:	73 cf       	rjmp	.-282    	; 0xe58 <Get_Password+0x4a>
			Counter_1++;

		}

	}
	Counter_1 = 0;
     f72:	18 a2       	std	Y+32, r1	; 0x20

	do {

		LCD_clearScreen();
     f74:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
		LCD_goToRowColumn(0, 0);
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
		LCD_displayString("Please,Re-enter");
     f80:	88 e9       	ldi	r24, 0x98	; 152
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
		LCD_goToRowColumn(1, 0);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
		LCD_displayString("PASSWORD");
     f90:	88 ea       	ldi	r24, 0xA8	; 168
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
		LCD_goToRowColumn(2, 0);
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
     fa0:	8a c0       	rjmp	.+276    	; 0x10b6 <Get_Password+0x2a8>

		while (Counter_2 < PASSWORD_SIZE) {

			uint8 Key = KeyPad_getPressedKey();
     fa2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
     fa6:	8d 8f       	std	Y+29, r24	; 0x1d

			if (Key >= 0 && Key <= 9) {
     fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     faa:	8a 30       	cpi	r24, 0x0A	; 10
     fac:	08 f0       	brcs	.+2      	; 0xfb0 <Get_Password+0x1a2>
     fae:	83 c0       	rjmp	.+262    	; 0x10b6 <Get_Password+0x2a8>

				Password_Config->checkPassword[Counter_2] = Key;
     fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	89 a1       	ldd	r24, Y+33	; 0x21
     fb8:	9a a1       	ldd	r25, Y+34	; 0x22
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	fc 01       	movw	r30, r24
     fc0:	35 96       	adiw	r30, 0x05	; 5
     fc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc4:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     fc6:	8a e2       	ldi	r24, 0x2A	; 42
     fc8:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	af ea       	ldi	r26, 0xAF	; 175
     fd2:	b3 e4       	ldi	r27, 0x43	; 67
     fd4:	8b 87       	std	Y+11, r24	; 0x0b
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	ad 87       	std	Y+13, r26	; 0x0d
     fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fde:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a ef       	ldi	r20, 0xFA	; 250
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	a9 87       	std	Y+9, r26	; 0x09
     ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <Get_Password+0x210>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	3f c0       	rjmp	.+126    	; 0x109c <Get_Password+0x28e>
	else if (__tmp > 65535)
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <Get_Password+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <Get_Password+0x270>
    1060:	88 ec       	ldi	r24, 0xC8	; 200
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <Get_Password+0x25e>
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <Get_Password+0x252>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <Get_Password+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <Get_Password+0x29a>
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(350);
				Counter_2++;
    10b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	8f 8f       	std	Y+31, r24	; 0x1f
		LCD_displayString("Please,Re-enter");
		LCD_goToRowColumn(1, 0);
		LCD_displayString("PASSWORD");
		LCD_goToRowColumn(2, 0);

		while (Counter_2 < PASSWORD_SIZE) {
    10b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b8:	85 30       	cpi	r24, 0x05	; 5
    10ba:	08 f4       	brcc	.+2      	; 0x10be <Get_Password+0x2b0>
    10bc:	72 cf       	rjmp	.-284    	; 0xfa2 <Get_Password+0x194>
				Counter_2++;

			}

		}
		Counter_2 = 0;
    10be:	1f 8e       	std	Y+31, r1	; 0x1f

	} while (CheckPassword(Password_Config) == FALSE);
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <CheckPassword>
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <Get_Password+0x2c0>
    10cc:	53 cf       	rjmp	.-346    	; 0xf74 <Get_Password+0x166>

}
    10ce:	a2 96       	adiw	r28, 0x22	; 34
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <CheckPassword>:
 * Parameters (in): Password_ConfigType * Password_Config
 * Return value: void
 * Description: Check The Password and its Re-typing

 ************************************************************************************/
uint8 CheckPassword(Password_ConfigType * Password_Config) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <CheckPassword+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <CheckPassword+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03

	uint8 state = TRUE;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    10f4:	19 82       	std	Y+1, r1	; 0x01
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <CheckPassword+0x4a>

		if (Password_Config->Password[Counter] != Password_Config->checkPassword[Counter]) {
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	9c 81       	ldd	r25, Y+4	; 0x04
    1102:	fc 01       	movw	r30, r24
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	40 81       	ld	r20, Z
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	fc 01       	movw	r30, r24
    111a:	35 96       	adiw	r30, 0x05	; 5
    111c:	80 81       	ld	r24, Z
    111e:	48 17       	cp	r20, r24
    1120:	09 f0       	breq	.+2      	; 0x1124 <CheckPassword+0x44>

			state = FALSE;
    1122:	1a 82       	std	Y+2, r1	; 0x02
 ************************************************************************************/
uint8 CheckPassword(Password_ConfigType * Password_Config) {

	uint8 state = TRUE;

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	85 30       	cpi	r24, 0x05	; 5
    112e:	20 f3       	brcs	.-56     	; 0x10f8 <CheckPassword+0x18>
			/*No Code*/
		}

	}

	return state;
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <SendPassword>:
 * Return value: void
 * Description: Send the Password by the UART

 ************************************************************************************/

void SendPassword(Password_ConfigType * Password_Config) {
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <SendPassword+0x6>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    1150:	19 82       	std	Y+1, r1	; 0x01
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <SendPassword+0x30>
		UART_sendByte(Password_Config->Password[Counter]);
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	9b 81       	ldd	r25, Y+3	; 0x03
    115e:	fc 01       	movw	r30, r24
    1160:	e2 0f       	add	r30, r18
    1162:	f3 1f       	adc	r31, r19
    1164:	80 81       	ld	r24, Z
    1166:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>

 ************************************************************************************/

void SendPassword(Password_ConfigType * Password_Config) {

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	8f 5f       	subi	r24, 0xFF	; 255
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	85 30       	cpi	r24, 0x05	; 5
    1174:	78 f3       	brcs	.-34     	; 0x1154 <SendPassword+0x14>
		UART_sendByte(Password_Config->Password[Counter]);

	}

}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <Menu>:
 * Return value: void
 * Description: Display on the LCD The Options which the user will choose one of them
 * Function is only for displaying , It Takes NO ACTION

 ************************************************************************************/
void Menu(void) {
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    118a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_displayString("(+):Change PW");
    118e:	81 eb       	ldi	r24, 0xB1	; 177
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(Second_ROW, First_Char);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("(=):OpenDoor");
    119e:	8f eb       	ldi	r24, 0xBF	; 191
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>

}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <Change_PW_ECU1>:
 *
 *               This Password is not the new password , this password will be sent to the
 *               Ctrl ECU to Be checked and compared by System Password

 *  ************************************************************************************/
void Change_PW_ECU1(void) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	66 97       	sbiw	r28, 0x16	; 22
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(CHANGE_PASSWORD);
    11c0:	87 e0       	ldi	r24, 0x07	; 7
    11c2:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
	uint8 Required_PW[PASSWORD_SIZE];
	uint8 Counter_1 = 0;
    11c6:	19 8a       	std	Y+17, r1	; 0x11
	LCD_clearScreen();
    11c8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("Please, Enter");
    11d4:	8d e7       	ldi	r24, 0x7D	; 125
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("OLD PASSWORD");
    11e4:	8c ec       	ldi	r24, 0xCC	; 204
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(2, 0);
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
    11f4:	89 c0       	rjmp	.+274    	; 0x1308 <Change_PW_ECU1+0x15c>

	while (Counter_1 < PASSWORD_SIZE) {

		uint8 Key = KeyPad_getPressedKey();
    11f6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
    11fa:	88 8b       	std	Y+16, r24	; 0x10

		if (Key >= 0 && Key <= 9) {
    11fc:	88 89       	ldd	r24, Y+16	; 0x10
    11fe:	8a 30       	cpi	r24, 0x0A	; 10
    1200:	08 f0       	brcs	.+2      	; 0x1204 <Change_PW_ECU1+0x58>
    1202:	82 c0       	rjmp	.+260    	; 0x1308 <Change_PW_ECU1+0x15c>

			Required_PW[Counter_1] = Key;
    1204:	89 89       	ldd	r24, Y+17	; 0x11
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	ce 01       	movw	r24, r28
    120c:	42 96       	adiw	r24, 0x12	; 18
    120e:	fc 01       	movw	r30, r24
    1210:	e2 0f       	add	r30, r18
    1212:	f3 1f       	adc	r31, r19
    1214:	88 89       	ldd	r24, Y+16	; 0x10
    1216:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1218:	8a e2       	ldi	r24, 0x2A	; 42
    121a:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	af ea       	ldi	r26, 0xAF	; 175
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <Change_PW_ECU1+0xc4>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <Change_PW_ECU1+0x142>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <Change_PW_ECU1+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <Change_PW_ECU1+0x124>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <Change_PW_ECU1+0x112>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <Change_PW_ECU1+0x106>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <Change_PW_ECU1+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <Change_PW_ECU1+0x14e>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(350);
			Counter_1++;
    1302:	89 89       	ldd	r24, Y+17	; 0x11
    1304:	8f 5f       	subi	r24, 0xFF	; 255
    1306:	89 8b       	std	Y+17, r24	; 0x11
	LCD_displayString("Please, Enter");
	LCD_goToRowColumn(1, 0);
	LCD_displayString("OLD PASSWORD");
	LCD_goToRowColumn(2, 0);

	while (Counter_1 < PASSWORD_SIZE) {
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	85 30       	cpi	r24, 0x05	; 5
    130c:	08 f4       	brcc	.+2      	; 0x1310 <Change_PW_ECU1+0x164>
    130e:	73 cf       	rjmp	.-282    	; 0x11f6 <Change_PW_ECU1+0x4a>
			LCD_displayCharacter('*');
			_delay_ms(350);
			Counter_1++;
		}
	}
	Counter_1 = 0;
    1310:	19 8a       	std	Y+17, r1	; 0x11

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    1312:	1f 86       	std	Y+15, r1	; 0x0f
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <Change_PW_ECU1+0x186>
		UART_sendByte(Required_PW[Counter]);
    1316:	8f 85       	ldd	r24, Y+15	; 0x0f
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	ce 01       	movw	r24, r28
    131e:	42 96       	adiw	r24, 0x12	; 18
    1320:	fc 01       	movw	r30, r24
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	80 81       	ld	r24, Z
    1328:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
			Counter_1++;
		}
	}
	Counter_1 = 0;

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    132c:	8f 85       	ldd	r24, Y+15	; 0x0f
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	8f 87       	std	Y+15, r24	; 0x0f
    1332:	8f 85       	ldd	r24, Y+15	; 0x0f
    1334:	85 30       	cpi	r24, 0x05	; 5
    1336:	78 f3       	brcs	.-34     	; 0x1316 <Change_PW_ECU1+0x16a>
		UART_sendByte(Required_PW[Counter]);

	}

}
    1338:	66 96       	adiw	r28, 0x16	; 22
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <Option_Select>:
 * to be used by the other ECU
 *
 * Mainly this function is used after Menu() Function
 *
 *  ************************************************************************************/
uint8 Option_Select(uint8 data) {
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <Option_Select+0x6>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01

	if (data == '+') {
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	8b 32       	cpi	r24, 0x2B	; 43
    135a:	19 f4       	brne	.+6      	; 0x1362 <Option_Select+0x18>
		return CHANGE_PASSWORD;
    135c:	87 e0       	ldi	r24, 0x07	; 7
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <Option_Select+0x26>

	} else if (data == '=') {
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	8d 33       	cpi	r24, 0x3D	; 61
    1366:	19 f4       	brne	.+6      	; 0x136e <Option_Select+0x24>
		return OPEN_DOOR;
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <Option_Select+0x26>
	}

	else {
		return FALSE;
    136e:	1a 82       	std	Y+2, r1	; 0x02
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <Oped_door_ECU1>:
 *
 *               This Password is not the new password , this password will be sent to the
 *               Ctrl ECU to Be checked and compared by System Password

 *  ************************************************************************************/
void Oped_door_ECU1(void) {
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	66 97       	sbiw	r28, 0x16	; 22
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(OPEN_DOOR);
    1390:	80 e1       	ldi	r24, 0x10	; 16
    1392:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
	uint8 Required_PW[PASSWORD_SIZE];
	uint8 Counter_1 = 0;
    1396:	19 8a       	std	Y+17, r1	; 0x11
	LCD_clearScreen();
    1398:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("Please, Enter");
    13a4:	8d e7       	ldi	r24, 0x7D	; 125
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("The PASSWORD");
    13b4:	89 ed       	ldi	r24, 0xD9	; 217
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(2, 0);
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
    13c4:	89 c0       	rjmp	.+274    	; 0x14d8 <Oped_door_ECU1+0x15c>

	while (Counter_1 < PASSWORD_SIZE) {

		uint8 Key = KeyPad_getPressedKey();
    13c6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
    13ca:	88 8b       	std	Y+16, r24	; 0x10

		if (Key >= 0 && Key <= 9) {
    13cc:	88 89       	ldd	r24, Y+16	; 0x10
    13ce:	8a 30       	cpi	r24, 0x0A	; 10
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <Oped_door_ECU1+0x58>
    13d2:	82 c0       	rjmp	.+260    	; 0x14d8 <Oped_door_ECU1+0x15c>

			Required_PW[Counter_1] = Key;
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	ce 01       	movw	r24, r28
    13dc:	42 96       	adiw	r24, 0x12	; 18
    13de:	fc 01       	movw	r30, r24
    13e0:	e2 0f       	add	r30, r18
    13e2:	f3 1f       	adc	r31, r19
    13e4:	88 89       	ldd	r24, Y+16	; 0x10
    13e6:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    13e8:	8a e2       	ldi	r24, 0x2A	; 42
    13ea:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	af ea       	ldi	r26, 0xAF	; 175
    13f4:	b3 e4       	ldi	r27, 0x43	; 67
    13f6:	8b 87       	std	Y+11, r24	; 0x0b
    13f8:	9c 87       	std	Y+12, r25	; 0x0c
    13fa:	ad 87       	std	Y+13, r26	; 0x0d
    13fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1400:	7c 85       	ldd	r23, Y+12	; 0x0c
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	9e 85       	ldd	r25, Y+14	; 0x0e
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a ef       	ldi	r20, 0xFA	; 250
    140c:	54 e4       	ldi	r21, 0x44	; 68
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	8f 83       	std	Y+7, r24	; 0x07
    1418:	98 87       	std	Y+8, r25	; 0x08
    141a:	a9 87       	std	Y+9, r26	; 0x09
    141c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	78 85       	ldd	r23, Y+8	; 0x08
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	2c f4       	brge	.+10     	; 0x1440 <Oped_door_ECU1+0xc4>
		__ticks = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	3f c0       	rjmp	.+126    	; 0x14be <Oped_door_ECU1+0x142>
	else if (__tmp > 65535)
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	4c f5       	brge	.+82     	; 0x14aa <Oped_door_ECU1+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e2       	ldi	r20, 0x20	; 32
    1466:	51 e4       	ldi	r21, 0x41	; 65
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <Oped_door_ECU1+0x124>
    1482:	88 ec       	ldi	r24, 0xC8	; 200
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <Oped_door_ECU1+0x112>
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	69 f7       	brne	.-38     	; 0x1482 <Oped_door_ECU1+0x106>
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <Oped_door_ECU1+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14aa:	6f 81       	ldd	r22, Y+7	; 0x07
    14ac:	78 85       	ldd	r23, Y+8	; 0x08
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <Oped_door_ECU1+0x14e>
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(350);
			Counter_1++;
    14d2:	89 89       	ldd	r24, Y+17	; 0x11
    14d4:	8f 5f       	subi	r24, 0xFF	; 255
    14d6:	89 8b       	std	Y+17, r24	; 0x11
	LCD_displayString("Please, Enter");
	LCD_goToRowColumn(1, 0);
	LCD_displayString("The PASSWORD");
	LCD_goToRowColumn(2, 0);

	while (Counter_1 < PASSWORD_SIZE) {
    14d8:	89 89       	ldd	r24, Y+17	; 0x11
    14da:	85 30       	cpi	r24, 0x05	; 5
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <Oped_door_ECU1+0x164>
    14de:	73 cf       	rjmp	.-282    	; 0x13c6 <Oped_door_ECU1+0x4a>
			LCD_displayCharacter('*');
			_delay_ms(350);
			Counter_1++;
		}
	}
	Counter_1 = 0;
    14e0:	19 8a       	std	Y+17, r1	; 0x11

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    14e2:	1f 86       	std	Y+15, r1	; 0x0f
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <Oped_door_ECU1+0x186>
		UART_sendByte(Required_PW[Counter]);
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	ce 01       	movw	r24, r28
    14ee:	42 96       	adiw	r24, 0x12	; 18
    14f0:	fc 01       	movw	r30, r24
    14f2:	e2 0f       	add	r30, r18
    14f4:	f3 1f       	adc	r31, r19
    14f6:	80 81       	ld	r24, Z
    14f8:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
			Counter_1++;
		}
	}
	Counter_1 = 0;

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    14fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	8f 87       	std	Y+15, r24	; 0x0f
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	85 30       	cpi	r24, 0x05	; 5
    1506:	78 f3       	brcs	.-34     	; 0x14e6 <Oped_door_ECU1+0x16a>
		UART_sendByte(Required_PW[Counter]);

	}

}
    1508:	66 96       	adiw	r28, 0x16	; 22
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <MSG>:
 * Return value: void
 * Description: Prints a string on the connected LCD
 *  ************************************************************************************/


void MSG(uint8 *Str) {
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	60 97       	sbiw	r28, 0x10	; 16
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	98 8b       	std	Y+16, r25	; 0x10
    1530:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
    1532:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_displayString(Str);
    1536:	8f 85       	ldd	r24, Y+15	; 0x0f
    1538:	98 89       	ldd	r25, Y+16	; 0x10
    153a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a6 e1       	ldi	r26, 0x16	; 22
    1544:	b4 e4       	ldi	r27, 0x44	; 68
    1546:	8b 87       	std	Y+11, r24	; 0x0b
    1548:	9c 87       	std	Y+12, r25	; 0x0c
    154a:	ad 87       	std	Y+13, r26	; 0x0d
    154c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1550:	7c 85       	ldd	r23, Y+12	; 0x0c
    1552:	8d 85       	ldd	r24, Y+13	; 0x0d
    1554:	9e 85       	ldd	r25, Y+14	; 0x0e
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	4a ef       	ldi	r20, 0xFA	; 250
    155c:	54 e4       	ldi	r21, 0x44	; 68
    155e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	8f 83       	std	Y+7, r24	; 0x07
    1568:	98 87       	std	Y+8, r25	; 0x08
    156a:	a9 87       	std	Y+9, r26	; 0x09
    156c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	2c f4       	brge	.+10     	; 0x1590 <MSG+0x76>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	3f c0       	rjmp	.+126    	; 0x160e <MSG+0xf4>
	else if (__tmp > 65535)
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	3f ef       	ldi	r19, 0xFF	; 255
    159c:	4f e7       	ldi	r20, 0x7F	; 127
    159e:	57 e4       	ldi	r21, 0x47	; 71
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a4:	18 16       	cp	r1, r24
    15a6:	4c f5       	brge	.+82     	; 0x15fa <MSG+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e2       	ldi	r20, 0x20	; 32
    15b6:	51 e4       	ldi	r21, 0x41	; 65
    15b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	9e 83       	std	Y+6, r25	; 0x06
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <MSG+0xd6>
    15d2:	88 ec       	ldi	r24, 0xC8	; 200
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9c 83       	std	Y+4, r25	; 0x04
    15d8:	8b 83       	std	Y+3, r24	; 0x03
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <MSG+0xc4>
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	69 f7       	brne	.-38     	; 0x15d2 <MSG+0xb8>
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <MSG+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <MSG+0x100>
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600);
}
    1622:	60 96       	adiw	r28, 0x10	; 16
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <Require_Password>:
 * Return value: void
 * Description:Take a Password from the user This Password is not the new password ,
 *this password will be sent to the Ctrl ECU to Be checked and compared by System Password

 *  ************************************************************************************/
void Require_Password(void) {
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	66 97       	sbiw	r28, 0x16	; 22
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61

	uint8 Required_PW[PASSWORD_SIZE];
	uint8 Counter_1 = 0;
    1648:	19 8a       	std	Y+17, r1	; 0x11
	LCD_clearScreen();
    164a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <LCD_clearScreen>
	LCD_goToRowColumn(0, 0);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("Please, Enter");
    1656:	8d e7       	ldi	r24, 0x7D	; 125
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString("The PASSWORD");
    1666:	89 ed       	ldi	r24, 0xD9	; 217
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
	LCD_goToRowColumn(2, 0);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
    1676:	89 c0       	rjmp	.+274    	; 0x178a <Require_Password+0x156>

	while (Counter_1 < PASSWORD_SIZE) {

		uint8 Key = KeyPad_getPressedKey();
    1678:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <KeyPad_getPressedKey>
    167c:	88 8b       	std	Y+16, r24	; 0x10

		if (Key >= 0 && Key <= 9) {
    167e:	88 89       	ldd	r24, Y+16	; 0x10
    1680:	8a 30       	cpi	r24, 0x0A	; 10
    1682:	08 f0       	brcs	.+2      	; 0x1686 <Require_Password+0x52>
    1684:	82 c0       	rjmp	.+260    	; 0x178a <Require_Password+0x156>

			Required_PW[Counter_1] = Key;
    1686:	89 89       	ldd	r24, Y+17	; 0x11
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	ce 01       	movw	r24, r28
    168e:	42 96       	adiw	r24, 0x12	; 18
    1690:	fc 01       	movw	r30, r24
    1692:	e2 0f       	add	r30, r18
    1694:	f3 1f       	adc	r31, r19
    1696:	88 89       	ldd	r24, Y+16	; 0x10
    1698:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    169a:	8a e2       	ldi	r24, 0x2A	; 42
    169c:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	af ea       	ldi	r26, 0xAF	; 175
    16a6:	b3 e4       	ldi	r27, 0x43	; 67
    16a8:	8b 87       	std	Y+11, r24	; 0x0b
    16aa:	9c 87       	std	Y+12, r25	; 0x0c
    16ac:	ad 87       	std	Y+13, r26	; 0x0d
    16ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a ef       	ldi	r20, 0xFA	; 250
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8f 83       	std	Y+7, r24	; 0x07
    16ca:	98 87       	std	Y+8, r25	; 0x08
    16cc:	a9 87       	std	Y+9, r26	; 0x09
    16ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e4:	88 23       	and	r24, r24
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <Require_Password+0xbe>
		__ticks = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <Require_Password+0x13c>
	else if (__tmp > 65535)
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	4c f5       	brge	.+82     	; 0x175c <Require_Password+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <Require_Password+0x11e>
    1734:	88 ec       	ldi	r24, 0xC8	; 200
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <Require_Password+0x10c>
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f7       	brne	.-38     	; 0x1734 <Require_Password+0x100>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <Require_Password+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <Require_Password+0x148>
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(350);
			Counter_1++;
    1784:	89 89       	ldd	r24, Y+17	; 0x11
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	89 8b       	std	Y+17, r24	; 0x11
	LCD_displayString("Please, Enter");
	LCD_goToRowColumn(1, 0);
	LCD_displayString("The PASSWORD");
	LCD_goToRowColumn(2, 0);

	while (Counter_1 < PASSWORD_SIZE) {
    178a:	89 89       	ldd	r24, Y+17	; 0x11
    178c:	85 30       	cpi	r24, 0x05	; 5
    178e:	08 f4       	brcc	.+2      	; 0x1792 <Require_Password+0x15e>
    1790:	73 cf       	rjmp	.-282    	; 0x1678 <Require_Password+0x44>
			LCD_displayCharacter('*');
			_delay_ms(350);
			Counter_1++;
		}
	}
	Counter_1 = 0;
    1792:	19 8a       	std	Y+17, r1	; 0x11

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    1794:	1f 86       	std	Y+15, r1	; 0x0f
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <Require_Password+0x180>
		UART_sendByte(Required_PW[Counter]);
    1798:	8f 85       	ldd	r24, Y+15	; 0x0f
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	ce 01       	movw	r24, r28
    17a0:	42 96       	adiw	r24, 0x12	; 18
    17a2:	fc 01       	movw	r30, r24
    17a4:	e2 0f       	add	r30, r18
    17a6:	f3 1f       	adc	r31, r19
    17a8:	80 81       	ld	r24, Z
    17aa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
			Counter_1++;
		}
	}
	Counter_1 = 0;

	for (uint8 Counter = 0; Counter < PASSWORD_SIZE; Counter++) {
    17ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	8f 87       	std	Y+15, r24	; 0x0f
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	85 30       	cpi	r24, 0x05	; 5
    17b8:	78 f3       	brcs	.-34     	; 0x1798 <Require_Password+0x164>
		UART_sendByte(Required_PW[Counter]);

	}

}
    17ba:	66 96       	adiw	r28, 0x16	; 22
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <KeyPad_getPressedKey>:

                  /*******************************************************************************
                     *                      Functions Definitions                                *
                  *******************************************************************************/

uint8 KeyPad_getPressedKey(void){
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <KeyPad_getPressedKey+0x6>
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
uint8 col , row ;
while(1){
	for(col=0;col<N_col;col++) /* loop for columns */
    17d6:	1a 82       	std	Y+2, r1	; 0x02
    17d8:	4c c0       	rjmp	.+152    	; 0x1872 <KeyPad_getPressedKey+0xa6>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_PORT_DIR = (0b00010000<<col);
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	80 e1       	ldi	r24, 0x10	; 16
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <KeyPad_getPressedKey+0x22>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	2a 95       	dec	r18
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <KeyPad_getPressedKey+0x1e>
    17f2:	80 83       	st	Z, r24

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT_OUT = (~(0b00010000<<col));
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	80 e1       	ldi	r24, 0x10	; 16
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <KeyPad_getPressedKey+0x3e>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <KeyPad_getPressedKey+0x3a>
    180e:	80 95       	com	r24
    1810:	80 83       	st	Z, r24

				for(row=0;row<N_row;row++) /* loop for rows */
    1812:	19 82       	std	Y+1, r1	; 0x01
    1814:	28 c0       	rjmp	.+80     	; 0x1866 <KeyPad_getPressedKey+0x9a>
				{
					if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    1816:	e9 e3       	ldi	r30, 0x39	; 57
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a9 01       	movw	r20, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <KeyPad_getPressedKey+0x62>
    182a:	55 95       	asr	r21
    182c:	47 95       	ror	r20
    182e:	8a 95       	dec	r24
    1830:	e2 f7       	brpl	.-8      	; 0x182a <KeyPad_getPressedKey+0x5e>
    1832:	ca 01       	movw	r24, r20
    1834:	81 70       	andi	r24, 0x01	; 1
    1836:	90 70       	andi	r25, 0x00	; 0
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	91 f4       	brne	.+36     	; 0x1860 <KeyPad_getPressedKey+0x94>
					{
						#if (N_col == 3)
							return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	98 2f       	mov	r25, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	89 0f       	add	r24, r25
    1850:	8f 5f       	subi	r24, 0xFF	; 255
    1852:	0e 94 3e 0c 	call	0x187c	; 0x187c <KeyPad_4x4_adjustKeyNumber>
						#endif
					}
				}
			}
		}
	}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT_OUT = (~(0b00010000<<col));

				for(row=0;row<N_row;row++) /* loop for rows */
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	a8 f2       	brcs	.-86     	; 0x1816 <KeyPad_getPressedKey+0x4a>
                  *******************************************************************************/

uint8 KeyPad_getPressedKey(void){
uint8 col , row ;
while(1){
	for(col=0;col<N_col;col++) /* loop for columns */
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	8f 5f       	subi	r24, 0xFF	; 255
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	08 f4       	brcc	.+2      	; 0x187a <KeyPad_getPressedKey+0xae>
    1878:	b0 cf       	rjmp	.-160    	; 0x17da <KeyPad_getPressedKey+0xe>
    187a:	ad cf       	rjmp	.-166    	; 0x17d6 <KeyPad_getPressedKey+0xa>

0000187c <KeyPad_4x4_adjustKeyNumber>:
	}

	#elif (N_col == 4)

	static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
	{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <KeyPad_4x4_adjustKeyNumber+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <KeyPad_4x4_adjustKeyNumber+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
		switch(button_number)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3c 83       	std	Y+4, r19	; 0x04
    1892:	2b 83       	std	Y+3, r18	; 0x03
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <KeyPad_4x4_adjustKeyNumber+0x24>
    189e:	70 c0       	rjmp	.+224    	; 0x1980 <KeyPad_4x4_adjustKeyNumber+0x104>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	29 30       	cpi	r18, 0x09	; 9
    18a6:	31 05       	cpc	r19, r1
    18a8:	5c f5       	brge	.+86     	; 0x1900 <KeyPad_4x4_adjustKeyNumber+0x84>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	91 05       	cpc	r25, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <KeyPad_4x4_adjustKeyNumber+0x3a>
    18b4:	59 c0       	rjmp	.+178    	; 0x1968 <KeyPad_4x4_adjustKeyNumber+0xec>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	25 30       	cpi	r18, 0x05	; 5
    18bc:	31 05       	cpc	r19, r1
    18be:	9c f4       	brge	.+38     	; 0x18e6 <KeyPad_4x4_adjustKeyNumber+0x6a>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <KeyPad_4x4_adjustKeyNumber+0x50>
    18ca:	48 c0       	rjmp	.+144    	; 0x195c <KeyPad_4x4_adjustKeyNumber+0xe0>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	23 30       	cpi	r18, 0x03	; 3
    18d2:	31 05       	cpc	r19, r1
    18d4:	0c f0       	brlt	.+2      	; 0x18d8 <KeyPad_4x4_adjustKeyNumber+0x5c>
    18d6:	45 c0       	rjmp	.+138    	; 0x1962 <KeyPad_4x4_adjustKeyNumber+0xe6>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <KeyPad_4x4_adjustKeyNumber+0x68>
    18e2:	39 c0       	rjmp	.+114    	; 0x1956 <KeyPad_4x4_adjustKeyNumber+0xda>
    18e4:	67 c0       	rjmp	.+206    	; 0x19b4 <KeyPad_4x4_adjustKeyNumber+0x138>
    18e6:	2b 81       	ldd	r18, Y+3	; 0x03
    18e8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ea:	26 30       	cpi	r18, 0x06	; 6
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <KeyPad_4x4_adjustKeyNumber+0x76>
    18f0:	41 c0       	rjmp	.+130    	; 0x1974 <KeyPad_4x4_adjustKeyNumber+0xf8>
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	87 30       	cpi	r24, 0x07	; 7
    18f8:	91 05       	cpc	r25, r1
    18fa:	0c f0       	brlt	.+2      	; 0x18fe <KeyPad_4x4_adjustKeyNumber+0x82>
    18fc:	3e c0       	rjmp	.+124    	; 0x197a <KeyPad_4x4_adjustKeyNumber+0xfe>
    18fe:	37 c0       	rjmp	.+110    	; 0x196e <KeyPad_4x4_adjustKeyNumber+0xf2>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	2c 30       	cpi	r18, 0x0C	; 12
    1906:	31 05       	cpc	r19, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <KeyPad_4x4_adjustKeyNumber+0x90>
    190a:	46 c0       	rjmp	.+140    	; 0x1998 <KeyPad_4x4_adjustKeyNumber+0x11c>
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	9c 81       	ldd	r25, Y+4	; 0x04
    1910:	8d 30       	cpi	r24, 0x0D	; 13
    1912:	91 05       	cpc	r25, r1
    1914:	5c f4       	brge	.+22     	; 0x192c <KeyPad_4x4_adjustKeyNumber+0xb0>
    1916:	2b 81       	ldd	r18, Y+3	; 0x03
    1918:	3c 81       	ldd	r19, Y+4	; 0x04
    191a:	2a 30       	cpi	r18, 0x0A	; 10
    191c:	31 05       	cpc	r19, r1
    191e:	b1 f1       	breq	.+108    	; 0x198c <KeyPad_4x4_adjustKeyNumber+0x110>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	8b 30       	cpi	r24, 0x0B	; 11
    1926:	91 05       	cpc	r25, r1
    1928:	a4 f5       	brge	.+104    	; 0x1992 <KeyPad_4x4_adjustKeyNumber+0x116>
    192a:	2d c0       	rjmp	.+90     	; 0x1986 <KeyPad_4x4_adjustKeyNumber+0x10a>
    192c:	2b 81       	ldd	r18, Y+3	; 0x03
    192e:	3c 81       	ldd	r19, Y+4	; 0x04
    1930:	2e 30       	cpi	r18, 0x0E	; 14
    1932:	31 05       	cpc	r19, r1
    1934:	b9 f1       	breq	.+110    	; 0x19a4 <KeyPad_4x4_adjustKeyNumber+0x128>
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	8e 30       	cpi	r24, 0x0E	; 14
    193c:	91 05       	cpc	r25, r1
    193e:	7c f1       	brlt	.+94     	; 0x199e <KeyPad_4x4_adjustKeyNumber+0x122>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	2f 30       	cpi	r18, 0x0F	; 15
    1946:	31 05       	cpc	r19, r1
    1948:	79 f1       	breq	.+94     	; 0x19a8 <KeyPad_4x4_adjustKeyNumber+0x12c>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	80 31       	cpi	r24, 0x10	; 16
    1950:	91 05       	cpc	r25, r1
    1952:	69 f1       	breq	.+90     	; 0x19ae <KeyPad_4x4_adjustKeyNumber+0x132>
    1954:	2f c0       	rjmp	.+94     	; 0x19b4 <KeyPad_4x4_adjustKeyNumber+0x138>
		{
			case 1: return 7;
    1956:	97 e0       	ldi	r25, 0x07	; 7
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	2e c0       	rjmp	.+92     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 2: return 8;
    195c:	28 e0       	ldi	r18, 0x08	; 8
    195e:	2a 83       	std	Y+2, r18	; 0x02
    1960:	2b c0       	rjmp	.+86     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 3: return 9;
    1962:	39 e0       	ldi	r19, 0x09	; 9
    1964:	3a 83       	std	Y+2, r19	; 0x02
    1966:	28 c0       	rjmp	.+80     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 4: return '%'; // ASCII Code of %
    1968:	85 e2       	ldi	r24, 0x25	; 37
    196a:	8a 83       	std	Y+2, r24	; 0x02
    196c:	25 c0       	rjmp	.+74     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 5: return 4;
    196e:	94 e0       	ldi	r25, 0x04	; 4
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	22 c0       	rjmp	.+68     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 6: return 5;
    1974:	25 e0       	ldi	r18, 0x05	; 5
    1976:	2a 83       	std	Y+2, r18	; 0x02
    1978:	1f c0       	rjmp	.+62     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 7: return 6;
    197a:	36 e0       	ldi	r19, 0x06	; 6
    197c:	3a 83       	std	Y+2, r19	; 0x02
    197e:	1c c0       	rjmp	.+56     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 8: return '*'; /* ASCII Code of '*' */
    1980:	8a e2       	ldi	r24, 0x2A	; 42
    1982:	8a 83       	std	Y+2, r24	; 0x02
    1984:	19 c0       	rjmp	.+50     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 9: return 1;
    1986:	91 e0       	ldi	r25, 0x01	; 1
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	16 c0       	rjmp	.+44     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 10: return 2;
    198c:	22 e0       	ldi	r18, 0x02	; 2
    198e:	2a 83       	std	Y+2, r18	; 0x02
    1990:	13 c0       	rjmp	.+38     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 11: return 3;
    1992:	33 e0       	ldi	r19, 0x03	; 3
    1994:	3a 83       	std	Y+2, r19	; 0x02
    1996:	10 c0       	rjmp	.+32     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 12: return '-'; /* ASCII Code of '-' */
    1998:	8d e2       	ldi	r24, 0x2D	; 45
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	0d c0       	rjmp	.+26     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 13: return 13;  /* ASCII of Enter */
    199e:	9d e0       	ldi	r25, 0x0D	; 13
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 14: return 0;
    19a4:	1a 82       	std	Y+2, r1	; 0x02
    19a6:	08 c0       	rjmp	.+16     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 15: return '='; /* ASCII Code of '=' */
    19a8:	2d e3       	ldi	r18, 0x3D	; 61
    19aa:	2a 83       	std	Y+2, r18	; 0x02
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			case 16: return '+'; /* ASCII Code of '+' */
    19ae:	3b e2       	ldi	r19, 0x2B	; 43
    19b0:	3a 83       	std	Y+2, r19	; 0x02
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <KeyPad_4x4_adjustKeyNumber+0x13c>
					break;
			default: return button_number;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
		}
	}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <LCD_init>:

              /*******************************************************************************
                *                      Functions Definitions                                  *
               *******************************************************************************/
void LCD_init(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    19d0:	a1 e3       	ldi	r26, 0x31	; 49
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e1 e3       	ldi	r30, 0x31	; 49
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 67       	ori	r24, 0x70	; 112
    19dc:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    19de:	a7 e3       	ldi	r26, 0x37	; 55
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e7 e3       	ldi	r30, 0x37	; 55
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	80 6f       	ori	r24, 0xF0	; 240
    19ea:	8c 93       	st	X, r24

		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif

		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    19f2:	88 e2       	ldi	r24, 0x28	; 40
    19f4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    19f8:	8c e0       	ldi	r24, 0x0C	; 12
    19fa:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	c3 56       	subi	r28, 0x63	; 99
    1a18:	d0 40       	sbci	r29, 0x00	; 0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 59       	subi	r30, 0x9D	; 157
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1a2c:	a2 e3       	ldi	r26, 0x32	; 50
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e2 e3       	ldi	r30, 0x32	; 50
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 7e       	andi	r24, 0xEF	; 239
    1a38:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1a3a:	a2 e3       	ldi	r26, 0x32	; 50
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 7d       	andi	r24, 0xDF	; 223
    1a46:	8c 93       	st	X, r24
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e1 5a       	subi	r30, 0xA1	; 161
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	80 83       	st	Z, r24
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	a2 83       	std	Z+2, r26	; 0x02
    1a5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	8e 01       	movw	r16, r28
    1a60:	05 5a       	subi	r16, 0xA5	; 165
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	e1 5a       	subi	r30, 0xA1	; 161
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a ef       	ldi	r20, 0xFA	; 250
    1a78:	54 e4       	ldi	r21, 0x44	; 68
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e5 5a       	subi	r30, 0xA5	; 165
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	44 f4       	brge	.+16     	; 0x1aba <LCD_sendCommand+0xb0>
		__ticks = 1;
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e7 5a       	subi	r30, 0xA7	; 167
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	64 c0       	rjmp	.+200    	; 0x1b82 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e5 5a       	subi	r30, 0xA5	; 165
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	0c f0       	brlt	.+2      	; 0x1ada <LCD_sendCommand+0xd0>
    1ad8:	43 c0       	rjmp	.+134    	; 0x1b60 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	fe 01       	movw	r30, r28
    1adc:	e1 5a       	subi	r30, 0xA1	; 161
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	8e 01       	movw	r16, r28
    1afa:	07 5a       	subi	r16, 0xA7	; 167
    1afc:	1f 4f       	sbci	r17, 0xFF	; 255
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	1f c0       	rjmp	.+62     	; 0x1b50 <LCD_sendCommand+0x146>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e9 5a       	subi	r30, 0xA9	; 169
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	88 ec       	ldi	r24, 0xC8	; 200
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
    1b20:	fe 01       	movw	r30, r28
    1b22:	e9 5a       	subi	r30, 0xA9	; 169
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x120>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e9 5a       	subi	r30, 0xA9	; 169
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	de 01       	movw	r26, r28
    1b3a:	a7 5a       	subi	r26, 0xA7	; 167
    1b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e7 5a       	subi	r30, 0xA7	; 167
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	9c 93       	st	X, r25
    1b4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	fe 01       	movw	r30, r28
    1b52:	e7 5a       	subi	r30, 0xA7	; 167
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	d1 f6       	brne	.-76     	; 0x1b12 <LCD_sendCommand+0x108>
    1b5e:	27 c0       	rjmp	.+78     	; 0x1bae <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	8e 01       	movw	r16, r28
    1b62:	07 5a       	subi	r16, 0xA7	; 167
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e5 5a       	subi	r30, 0xA5	; 165
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	60 81       	ld	r22, Z
    1b6e:	71 81       	ldd	r23, Z+1	; 0x01
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	91 83       	std	Z+1, r25	; 0x01
    1b80:	80 83       	st	Z, r24
    1b82:	de 01       	movw	r26, r28
    1b84:	ab 5a       	subi	r26, 0xAB	; 171
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e7 5a       	subi	r30, 0xA7	; 167
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	8d 93       	st	X+, r24
    1b94:	9c 93       	st	X, r25
    1b96:	fe 01       	movw	r30, r28
    1b98:	eb 5a       	subi	r30, 0xAB	; 171
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_sendCommand+0x196>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	eb 5a       	subi	r30, 0xAB	; 171
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bae:	a2 e3       	ldi	r26, 0x32	; 50
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e2 e3       	ldi	r30, 0x32	; 50
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 64       	ori	r24, 0x40	; 64
    1bba:	8c 93       	st	X, r24
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 5a       	subi	r30, 0xAF	; 175
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a0 e8       	ldi	r26, 0x80	; 128
    1bc8:	bf e3       	ldi	r27, 0x3F	; 63
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	03 5b       	subi	r16, 0xB3	; 179
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ef 5a       	subi	r30, 0xAF	; 175
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c00:	fe 01       	movw	r30, r28
    1c02:	e3 5b       	subi	r30, 0xB3	; 179
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <LCD_sendCommand+0x224>
		__ticks = 1;
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e5 5b       	subi	r30, 0xB5	; 181
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	64 c0       	rjmp	.+200    	; 0x1cf6 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e3 5b       	subi	r30, 0xB3	; 179
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	0c f0       	brlt	.+2      	; 0x1c4e <LCD_sendCommand+0x244>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ef 5a       	subi	r30, 0xAF	; 175
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	05 5b       	subi	r16, 0xB5	; 181
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	1f c0       	rjmp	.+62     	; 0x1cc4 <LCD_sendCommand+0x2ba>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5b       	subi	r30, 0xB7	; 183
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	80 83       	st	Z, r24
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 5b       	subi	r30, 0xB7	; 183
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_sendCommand+0x294>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e7 5b       	subi	r30, 0xB7	; 183
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	de 01       	movw	r26, r28
    1cae:	a5 5b       	subi	r26, 0xB5	; 181
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 5b       	subi	r30, 0xB5	; 181
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	9c 93       	st	X, r25
    1cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 5b       	subi	r30, 0xB5	; 181
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	d1 f6       	brne	.-76     	; 0x1c86 <LCD_sendCommand+0x27c>
    1cd2:	27 c0       	rjmp	.+78     	; 0x1d22 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	8e 01       	movw	r16, r28
    1cd6:	05 5b       	subi	r16, 0xB5	; 181
    1cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cda:	fe 01       	movw	r30, r28
    1cdc:	e3 5b       	subi	r30, 0xB3	; 179
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	de 01       	movw	r26, r28
    1cf8:	a9 5b       	subi	r26, 0xB9	; 185
    1cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e5 5b       	subi	r30, 0xB5	; 181
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	8d 93       	st	X+, r24
    1d08:	9c 93       	st	X, r25
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e9 5b       	subi	r30, 0xB9	; 185
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_sendCommand+0x30a>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 5b       	subi	r30, 0xB9	; 185
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1d22:	a8 e3       	ldi	r26, 0x38	; 56
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e8 e3       	ldi	r30, 0x38	; 56
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	9f 70       	andi	r25, 0x0F	; 15
    1d30:	fe 01       	movw	r30, r28
    1d32:	ed 59       	subi	r30, 0x9D	; 157
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 81       	ld	r24, Z
    1d38:	80 7f       	andi	r24, 0xF0	; 240
    1d3a:	89 2b       	or	r24, r25
    1d3c:	8c 93       	st	X, r24
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 5b       	subi	r30, 0xBD	; 189
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e8       	ldi	r26, 0x80	; 128
    1d4a:	bf e3       	ldi	r27, 0x3F	; 63
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	8e 01       	movw	r16, r28
    1d56:	01 5c       	subi	r16, 0xC1	; 193
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	ed 5b       	subi	r30, 0xBD	; 189
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a ef       	ldi	r20, 0xFA	; 250
    1d6e:	54 e4       	ldi	r21, 0x44	; 68
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	f8 01       	movw	r30, r16
    1d7a:	80 83       	st	Z, r24
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	a2 83       	std	Z+2, r26	; 0x02
    1d80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d82:	fe 01       	movw	r30, r28
    1d84:	ff 96       	adiw	r30, 0x3f	; 63
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9e af       	std	Y+62, r25	; 0x3e
    1da4:	8d af       	std	Y+61, r24	; 0x3d
    1da6:	46 c0       	rjmp	.+140    	; 0x1e34 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1da8:	fe 01       	movw	r30, r28
    1daa:	ff 96       	adiw	r30, 0x3f	; 63
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	64 f5       	brge	.+88     	; 0x1e1c <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ed 5b       	subi	r30, 0xBD	; 189
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e2       	ldi	r20, 0x20	; 32
    1dd8:	51 e4       	ldi	r21, 0x41	; 65
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e af       	std	Y+62, r25	; 0x3e
    1df0:	8d af       	std	Y+61, r24	; 0x3d
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <LCD_sendCommand+0x408>
    1df4:	88 ec       	ldi	r24, 0xC8	; 200
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9c af       	std	Y+60, r25	; 0x3c
    1dfa:	8b af       	std	Y+59, r24	; 0x3b
    1dfc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dfe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_sendCommand+0x3f6>
    1e04:	9c af       	std	Y+60, r25	; 0x3c
    1e06:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	9e af       	std	Y+62, r25	; 0x3e
    1e10:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	69 f7       	brne	.-38     	; 0x1df4 <LCD_sendCommand+0x3ea>
    1e1a:	16 c0       	rjmp	.+44     	; 0x1e48 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ff 96       	adiw	r30, 0x3f	; 63
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	9a af       	std	Y+58, r25	; 0x3a
    1e3a:	89 af       	std	Y+57, r24	; 0x39
    1e3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_sendCommand+0x436>
    1e44:	9a af       	std	Y+58, r25	; 0x3a
    1e46:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e48:	a2 e3       	ldi	r26, 0x32	; 50
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e2 e3       	ldi	r30, 0x32	; 50
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 7b       	andi	r24, 0xBF	; 191
    1e54:	8c 93       	st	X, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8d ab       	std	Y+53, r24	; 0x35
    1e60:	9e ab       	std	Y+54, r25	; 0x36
    1e62:	af ab       	std	Y+55, r26	; 0x37
    1e64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6d a9       	ldd	r22, Y+53	; 0x35
    1e68:	7e a9       	ldd	r23, Y+54	; 0x36
    1e6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a ef       	ldi	r20, 0xFA	; 250
    1e74:	54 e4       	ldi	r21, 0x44	; 68
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	89 ab       	std	Y+49, r24	; 0x31
    1e80:	9a ab       	std	Y+50, r25	; 0x32
    1e82:	ab ab       	std	Y+51, r26	; 0x33
    1e84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e86:	69 a9       	ldd	r22, Y+49	; 0x31
    1e88:	7a a9       	ldd	r23, Y+50	; 0x32
    1e8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	98 ab       	std	Y+48, r25	; 0x30
    1ea4:	8f a7       	std	Y+47, r24	; 0x2f
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_sendCommand+0x4fe>
    1eea:	88 ec       	ldi	r24, 0xC8	; 200
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9e a7       	std	Y+46, r25	; 0x2e
    1ef0:	8d a7       	std	Y+45, r24	; 0x2d
    1ef2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_sendCommand+0x4ec>
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f00:	98 a9       	ldd	r25, Y+48	; 0x30
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_sendCommand+0x4e0>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	69 a9       	ldd	r22, Y+49	; 0x31
    1f14:	7a a9       	ldd	r23, Y+50	; 0x32
    1f16:	8b a9       	ldd	r24, Y+51	; 0x33
    1f18:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	9c a7       	std	Y+44, r25	; 0x2c
    1f2c:	8b a7       	std	Y+43, r24	; 0x2b
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_sendCommand+0x528>
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f3a:	a2 e3       	ldi	r26, 0x32	; 50
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e2 e3       	ldi	r30, 0x32	; 50
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 64       	ori	r24, 0x40	; 64
    1f46:	8c 93       	st	X, r24
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e8       	ldi	r26, 0x80	; 128
    1f4e:	bf e3       	ldi	r27, 0x3F	; 63
    1f50:	8f a3       	std	Y+39, r24	; 0x27
    1f52:	98 a7       	std	Y+40, r25	; 0x28
    1f54:	a9 a7       	std	Y+41, r26	; 0x29
    1f56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	8b a3       	std	Y+35, r24	; 0x23
    1f72:	9c a3       	std	Y+36, r25	; 0x24
    1f74:	ad a3       	std	Y+37, r26	; 0x25
    1f76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f78:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_sendCommand+0x590>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1f9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_sendCommand+0x5f0>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	98 a3       	std	Y+32, r25	; 0x20
    1fe2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_sendCommand+0x5de>
    1fec:	98 a3       	std	Y+32, r25	; 0x20
    1fee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9a a3       	std	Y+34, r25	; 0x22
    1ff8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_sendCommand+0x5d2>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
    2018:	89 a1       	ldd	r24, Y+33	; 0x21
    201a:	9a a1       	ldd	r25, Y+34	; 0x22
    201c:	9e 8f       	std	Y+30, r25	; 0x1e
    201e:	8d 8f       	std	Y+29, r24	; 0x1d
    2020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2022:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_sendCommand+0x61a>
    2028:	9e 8f       	std	Y+30, r25	; 0x1e
    202a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    202c:	a8 e3       	ldi	r26, 0x38	; 56
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	28 2f       	mov	r18, r24
    2038:	2f 70       	andi	r18, 0x0F	; 15
    203a:	fe 01       	movw	r30, r28
    203c:	ed 59       	subi	r30, 0x9D	; 157
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	82 95       	swap	r24
    2048:	92 95       	swap	r25
    204a:	90 7f       	andi	r25, 0xF0	; 240
    204c:	98 27       	eor	r25, r24
    204e:	80 7f       	andi	r24, 0xF0	; 240
    2050:	98 27       	eor	r25, r24
    2052:	82 2b       	or	r24, r18
    2054:	8c 93       	st	X, r24
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a0 e8       	ldi	r26, 0x80	; 128
    205c:	bf e3       	ldi	r27, 0x3F	; 63
    205e:	89 8f       	std	Y+25, r24	; 0x19
    2060:	9a 8f       	std	Y+26, r25	; 0x1a
    2062:	ab 8f       	std	Y+27, r26	; 0x1b
    2064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2066:	69 8d       	ldd	r22, Y+25	; 0x19
    2068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    206a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    206c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	4a ef       	ldi	r20, 0xFA	; 250
    2074:	54 e4       	ldi	r21, 0x44	; 68
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	8d 8b       	std	Y+21, r24	; 0x15
    2080:	9e 8b       	std	Y+22, r25	; 0x16
    2082:	af 8b       	std	Y+23, r26	; 0x17
    2084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209a:	88 23       	and	r24, r24
    209c:	2c f4       	brge	.+10     	; 0x20a8 <LCD_sendCommand+0x69e>
		__ticks = 1;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	3f c0       	rjmp	.+126    	; 0x2126 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	4c f5       	brge	.+82     	; 0x2112 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	69 8d       	ldd	r22, Y+25	; 0x19
    20c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e2       	ldi	r20, 0x20	; 32
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9c 8b       	std	Y+20, r25	; 0x14
    20e6:	8b 8b       	std	Y+19, r24	; 0x13
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <LCD_sendCommand+0x6fe>
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9a 8b       	std	Y+18, r25	; 0x12
    20f0:	89 8b       	std	Y+17, r24	; 0x11
    20f2:	89 89       	ldd	r24, Y+17	; 0x11
    20f4:	9a 89       	ldd	r25, Y+18	; 0x12
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_sendCommand+0x6ec>
    20fa:	9a 8b       	std	Y+18, r25	; 0x12
    20fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2100:	9c 89       	ldd	r25, Y+20	; 0x14
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9c 8b       	std	Y+20, r25	; 0x14
    2106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2108:	8b 89       	ldd	r24, Y+19	; 0x13
    210a:	9c 89       	ldd	r25, Y+20	; 0x14
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	69 f7       	brne	.-38     	; 0x20ea <LCD_sendCommand+0x6e0>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_sendCommand+0x728>
    2136:	98 8b       	std	Y+16, r25	; 0x10
    2138:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    213a:	a2 e3       	ldi	r26, 0x32	; 50
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e2 e3       	ldi	r30, 0x32	; 50
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8f 7b       	andi	r24, 0xBF	; 191
    2146:	8c 93       	st	X, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 e8       	ldi	r26, 0x80	; 128
    214e:	bf e3       	ldi	r27, 0x3F	; 63
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_sendCommand+0x790>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_sendCommand+0x7f0>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_sendCommand+0x7de>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_sendCommand+0x7d2>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_sendCommand+0x81a>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    222c:	cd 59       	subi	r28, 0x9D	; 157
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	c3 56       	subi	r28, 0x63	; 99
    2252:	d0 40       	sbci	r29, 0x00	; 0
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	fe 01       	movw	r30, r28
    2260:	ed 59       	subi	r30, 0x9D	; 157
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2266:	a2 e3       	ldi	r26, 0x32	; 50
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e2 e3       	ldi	r30, 0x32	; 50
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	80 61       	ori	r24, 0x10	; 16
    2272:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2274:	a2 e3       	ldi	r26, 0x32	; 50
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e2 e3       	ldi	r30, 0x32	; 50
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8f 7d       	andi	r24, 0xDF	; 223
    2280:	8c 93       	st	X, r24
    2282:	fe 01       	movw	r30, r28
    2284:	e1 5a       	subi	r30, 0xA1	; 161
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	80 83       	st	Z, r24
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	a2 83       	std	Z+2, r26	; 0x02
    2296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	8e 01       	movw	r16, r28
    229a:	05 5a       	subi	r16, 0xA5	; 165
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e1 5a       	subi	r30, 0xA1	; 161
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a ef       	ldi	r20, 0xFA	; 250
    22b2:	54 e4       	ldi	r21, 0x44	; 68
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22c6:	fe 01       	movw	r30, r28
    22c8:	e5 5a       	subi	r30, 0xA5	; 165
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	44 f4       	brge	.+16     	; 0x22f4 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    22e4:	fe 01       	movw	r30, r28
    22e6:	e7 5a       	subi	r30, 0xA7	; 167
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	64 c0       	rjmp	.+200    	; 0x23bc <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 5a       	subi	r30, 0xA5	; 165
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	0c f0       	brlt	.+2      	; 0x2314 <LCD_displayCharacter+0xd0>
    2312:	43 c0       	rjmp	.+134    	; 0x239a <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	fe 01       	movw	r30, r28
    2316:	e1 5a       	subi	r30, 0xA1	; 161
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8e 01       	movw	r16, r28
    2334:	07 5a       	subi	r16, 0xA7	; 167
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	f8 01       	movw	r30, r16
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	1f c0       	rjmp	.+62     	; 0x238a <LCD_displayCharacter+0x146>
    234c:	fe 01       	movw	r30, r28
    234e:	e9 5a       	subi	r30, 0xA9	; 169
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	88 ec       	ldi	r24, 0xC8	; 200
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	fe 01       	movw	r30, r28
    235c:	e9 5a       	subi	r30, 0xA9	; 169
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_displayCharacter+0x120>
    2368:	fe 01       	movw	r30, r28
    236a:	e9 5a       	subi	r30, 0xA9	; 169
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	de 01       	movw	r26, r28
    2374:	a7 5a       	subi	r26, 0xA7	; 167
    2376:	bf 4f       	sbci	r27, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5a       	subi	r30, 0xA7	; 167
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	11 96       	adiw	r26, 0x01	; 1
    2386:	9c 93       	st	X, r25
    2388:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	fe 01       	movw	r30, r28
    238c:	e7 5a       	subi	r30, 0xA7	; 167
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	d1 f6       	brne	.-76     	; 0x234c <LCD_displayCharacter+0x108>
    2398:	27 c0       	rjmp	.+78     	; 0x23e8 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	8e 01       	movw	r16, r28
    239c:	07 5a       	subi	r16, 0xA7	; 167
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	e5 5a       	subi	r30, 0xA5	; 165
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	f8 01       	movw	r30, r16
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
    23bc:	de 01       	movw	r26, r28
    23be:	ab 5a       	subi	r26, 0xAB	; 171
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e7 5a       	subi	r30, 0xA7	; 167
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	8d 93       	st	X+, r24
    23ce:	9c 93       	st	X, r25
    23d0:	fe 01       	movw	r30, r28
    23d2:	eb 5a       	subi	r30, 0xAB	; 171
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_displayCharacter+0x196>
    23de:	fe 01       	movw	r30, r28
    23e0:	eb 5a       	subi	r30, 0xAB	; 171
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    23e8:	a2 e3       	ldi	r26, 0x32	; 50
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e2 e3       	ldi	r30, 0x32	; 50
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 64       	ori	r24, 0x40	; 64
    23f4:	8c 93       	st	X, r24
    23f6:	fe 01       	movw	r30, r28
    23f8:	ef 5a       	subi	r30, 0xAF	; 175
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	80 83       	st	Z, r24
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	a2 83       	std	Z+2, r26	; 0x02
    240a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	8e 01       	movw	r16, r28
    240e:	03 5b       	subi	r16, 0xB3	; 179
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	ef 5a       	subi	r30, 0xAF	; 175
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	a2 83       	std	Z+2, r26	; 0x02
    2438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243a:	fe 01       	movw	r30, r28
    243c:	e3 5b       	subi	r30, 0xB3	; 179
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	44 f4       	brge	.+16     	; 0x2468 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2458:	fe 01       	movw	r30, r28
    245a:	e5 5b       	subi	r30, 0xB5	; 181
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	64 c0       	rjmp	.+200    	; 0x2530 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2468:	fe 01       	movw	r30, r28
    246a:	e3 5b       	subi	r30, 0xB3	; 179
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	0c f0       	brlt	.+2      	; 0x2488 <LCD_displayCharacter+0x244>
    2486:	43 c0       	rjmp	.+134    	; 0x250e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	ef 5a       	subi	r30, 0xAF	; 175
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8e 01       	movw	r16, r28
    24a8:	05 5b       	subi	r16, 0xB5	; 181
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	1f c0       	rjmp	.+62     	; 0x24fe <LCD_displayCharacter+0x2ba>
    24c0:	fe 01       	movw	r30, r28
    24c2:	e7 5b       	subi	r30, 0xB7	; 183
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_displayCharacter+0x294>
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 5b       	subi	r30, 0xB7	; 183
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	de 01       	movw	r26, r28
    24e8:	a5 5b       	subi	r26, 0xB5	; 181
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e5 5b       	subi	r30, 0xB5	; 181
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	11 96       	adiw	r26, 0x01	; 1
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	fe 01       	movw	r30, r28
    2500:	e5 5b       	subi	r30, 0xB5	; 181
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	d1 f6       	brne	.-76     	; 0x24c0 <LCD_displayCharacter+0x27c>
    250c:	27 c0       	rjmp	.+78     	; 0x255c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	8e 01       	movw	r16, r28
    2510:	05 5b       	subi	r16, 0xB5	; 181
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e3 5b       	subi	r30, 0xB3	; 179
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	de 01       	movw	r26, r28
    2532:	a9 5b       	subi	r26, 0xB9	; 185
    2534:	bf 4f       	sbci	r27, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5b       	subi	r30, 0xB5	; 181
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	8d 93       	st	X+, r24
    2542:	9c 93       	st	X, r25
    2544:	fe 01       	movw	r30, r28
    2546:	e9 5b       	subi	r30, 0xB9	; 185
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <LCD_displayCharacter+0x30a>
    2552:	fe 01       	movw	r30, r28
    2554:	e9 5b       	subi	r30, 0xB9	; 185
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    255c:	a8 e3       	ldi	r26, 0x38	; 56
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e8 e3       	ldi	r30, 0x38	; 56
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	98 2f       	mov	r25, r24
    2568:	9f 70       	andi	r25, 0x0F	; 15
    256a:	fe 01       	movw	r30, r28
    256c:	ed 59       	subi	r30, 0x9D	; 157
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	80 7f       	andi	r24, 0xF0	; 240
    2574:	89 2b       	or	r24, r25
    2576:	8c 93       	st	X, r24
    2578:	fe 01       	movw	r30, r28
    257a:	ed 5b       	subi	r30, 0xBD	; 189
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	a0 e8       	ldi	r26, 0x80	; 128
    2584:	bf e3       	ldi	r27, 0x3F	; 63
    2586:	80 83       	st	Z, r24
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	a2 83       	std	Z+2, r26	; 0x02
    258c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	8e 01       	movw	r16, r28
    2590:	01 5c       	subi	r16, 0xC1	; 193
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	ed 5b       	subi	r30, 0xBD	; 189
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	a2 83       	std	Z+2, r26	; 0x02
    25ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25bc:	fe 01       	movw	r30, r28
    25be:	ff 96       	adiw	r30, 0x3f	; 63
    25c0:	60 81       	ld	r22, Z
    25c2:	71 81       	ldd	r23, Z+1	; 0x01
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	93 81       	ldd	r25, Z+3	; 0x03
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	9e af       	std	Y+62, r25	; 0x3e
    25de:	8d af       	std	Y+61, r24	; 0x3d
    25e0:	46 c0       	rjmp	.+140    	; 0x266e <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    25e2:	fe 01       	movw	r30, r28
    25e4:	ff 96       	adiw	r30, 0x3f	; 63
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	64 f5       	brge	.+88     	; 0x2656 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 5b       	subi	r30, 0xBD	; 189
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	60 81       	ld	r22, Z
    2606:	71 81       	ldd	r23, Z+1	; 0x01
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	40 e2       	ldi	r20, 0x20	; 32
    2612:	51 e4       	ldi	r21, 0x41	; 65
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	bc 01       	movw	r22, r24
    261e:	cd 01       	movw	r24, r26
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e af       	std	Y+62, r25	; 0x3e
    262a:	8d af       	std	Y+61, r24	; 0x3d
    262c:	0f c0       	rjmp	.+30     	; 0x264c <LCD_displayCharacter+0x408>
    262e:	88 ec       	ldi	r24, 0xC8	; 200
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9c af       	std	Y+60, r25	; 0x3c
    2634:	8b af       	std	Y+59, r24	; 0x3b
    2636:	8b ad       	ldd	r24, Y+59	; 0x3b
    2638:	9c ad       	ldd	r25, Y+60	; 0x3c
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_displayCharacter+0x3f6>
    263e:	9c af       	std	Y+60, r25	; 0x3c
    2640:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2642:	8d ad       	ldd	r24, Y+61	; 0x3d
    2644:	9e ad       	ldd	r25, Y+62	; 0x3e
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	9e af       	std	Y+62, r25	; 0x3e
    264a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264c:	8d ad       	ldd	r24, Y+61	; 0x3d
    264e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	69 f7       	brne	.-38     	; 0x262e <LCD_displayCharacter+0x3ea>
    2654:	16 c0       	rjmp	.+44     	; 0x2682 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2656:	fe 01       	movw	r30, r28
    2658:	ff 96       	adiw	r30, 0x3f	; 63
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e af       	std	Y+62, r25	; 0x3e
    266c:	8d af       	std	Y+61, r24	; 0x3d
    266e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2670:	9e ad       	ldd	r25, Y+62	; 0x3e
    2672:	9a af       	std	Y+58, r25	; 0x3a
    2674:	89 af       	std	Y+57, r24	; 0x39
    2676:	89 ad       	ldd	r24, Y+57	; 0x39
    2678:	9a ad       	ldd	r25, Y+58	; 0x3a
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_displayCharacter+0x436>
    267e:	9a af       	std	Y+58, r25	; 0x3a
    2680:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2682:	a2 e3       	ldi	r26, 0x32	; 50
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e2 e3       	ldi	r30, 0x32	; 50
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	8f 7b       	andi	r24, 0xBF	; 191
    268e:	8c 93       	st	X, r24
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e8       	ldi	r26, 0x80	; 128
    2696:	bf e3       	ldi	r27, 0x3F	; 63
    2698:	8d ab       	std	Y+53, r24	; 0x35
    269a:	9e ab       	std	Y+54, r25	; 0x36
    269c:	af ab       	std	Y+55, r26	; 0x37
    269e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6d a9       	ldd	r22, Y+53	; 0x35
    26a2:	7e a9       	ldd	r23, Y+54	; 0x36
    26a4:	8f a9       	ldd	r24, Y+55	; 0x37
    26a6:	98 ad       	ldd	r25, Y+56	; 0x38
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a ef       	ldi	r20, 0xFA	; 250
    26ae:	54 e4       	ldi	r21, 0x44	; 68
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	89 ab       	std	Y+49, r24	; 0x31
    26ba:	9a ab       	std	Y+50, r25	; 0x32
    26bc:	ab ab       	std	Y+51, r26	; 0x33
    26be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26c0:	69 a9       	ldd	r22, Y+49	; 0x31
    26c2:	7a a9       	ldd	r23, Y+50	; 0x32
    26c4:	8b a9       	ldd	r24, Y+51	; 0x33
    26c6:	9c a9       	ldd	r25, Y+52	; 0x34
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6d a9       	ldd	r22, Y+53	; 0x35
    26fc:	7e a9       	ldd	r23, Y+54	; 0x36
    26fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2700:	98 ad       	ldd	r25, Y+56	; 0x38
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	98 ab       	std	Y+48, r25	; 0x30
    2720:	8f a7       	std	Y+47, r24	; 0x2f
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_displayCharacter+0x4fe>
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9e a7       	std	Y+46, r25	; 0x2e
    272a:	8d a7       	std	Y+45, r24	; 0x2d
    272c:	8d a5       	ldd	r24, Y+45	; 0x2d
    272e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayCharacter+0x4ec>
    2734:	9e a7       	std	Y+46, r25	; 0x2e
    2736:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8f a5       	ldd	r24, Y+47	; 0x2f
    273a:	98 a9       	ldd	r25, Y+48	; 0x30
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	98 ab       	std	Y+48, r25	; 0x30
    2740:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8f a5       	ldd	r24, Y+47	; 0x2f
    2744:	98 a9       	ldd	r25, Y+48	; 0x30
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <LCD_displayCharacter+0x4e0>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	69 a9       	ldd	r22, Y+49	; 0x31
    274e:	7a a9       	ldd	r23, Y+50	; 0x32
    2750:	8b a9       	ldd	r24, Y+51	; 0x33
    2752:	9c a9       	ldd	r25, Y+52	; 0x34
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	98 ab       	std	Y+48, r25	; 0x30
    275e:	8f a7       	std	Y+47, r24	; 0x2f
    2760:	8f a5       	ldd	r24, Y+47	; 0x2f
    2762:	98 a9       	ldd	r25, Y+48	; 0x30
    2764:	9c a7       	std	Y+44, r25	; 0x2c
    2766:	8b a7       	std	Y+43, r24	; 0x2b
    2768:	8b a5       	ldd	r24, Y+43	; 0x2b
    276a:	9c a5       	ldd	r25, Y+44	; 0x2c
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_displayCharacter+0x528>
    2770:	9c a7       	std	Y+44, r25	; 0x2c
    2772:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2774:	a2 e3       	ldi	r26, 0x32	; 50
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e2 e3       	ldi	r30, 0x32	; 50
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	80 64       	ori	r24, 0x40	; 64
    2780:	8c 93       	st	X, r24
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e8       	ldi	r26, 0x80	; 128
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	8f a3       	std	Y+39, r24	; 0x27
    278c:	98 a7       	std	Y+40, r25	; 0x28
    278e:	a9 a7       	std	Y+41, r26	; 0x29
    2790:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6f a1       	ldd	r22, Y+39	; 0x27
    2794:	78 a5       	ldd	r23, Y+40	; 0x28
    2796:	89 a5       	ldd	r24, Y+41	; 0x29
    2798:	9a a5       	ldd	r25, Y+42	; 0x2a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a ef       	ldi	r20, 0xFA	; 250
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8b a3       	std	Y+35, r24	; 0x23
    27ac:	9c a3       	std	Y+36, r25	; 0x24
    27ae:	ad a3       	std	Y+37, r26	; 0x25
    27b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b2:	6b a1       	ldd	r22, Y+35	; 0x23
    27b4:	7c a1       	ldd	r23, Y+36	; 0x24
    27b6:	8d a1       	ldd	r24, Y+37	; 0x25
    27b8:	9e a1       	ldd	r25, Y+38	; 0x26
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_displayCharacter+0x590>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    27d4:	6b a1       	ldd	r22, Y+35	; 0x23
    27d6:	7c a1       	ldd	r23, Y+36	; 0x24
    27d8:	8d a1       	ldd	r24, Y+37	; 0x25
    27da:	9e a1       	ldd	r25, Y+38	; 0x26
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6f a1       	ldd	r22, Y+39	; 0x27
    27ee:	78 a5       	ldd	r23, Y+40	; 0x28
    27f0:	89 a5       	ldd	r24, Y+41	; 0x29
    27f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9a a3       	std	Y+34, r25	; 0x22
    2812:	89 a3       	std	Y+33, r24	; 0x21
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_displayCharacter+0x5f0>
    2816:	88 ec       	ldi	r24, 0xC8	; 200
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	98 a3       	std	Y+32, r25	; 0x20
    281c:	8f 8f       	std	Y+31, r24	; 0x1f
    281e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2820:	98 a1       	ldd	r25, Y+32	; 0x20
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_displayCharacter+0x5de>
    2826:	98 a3       	std	Y+32, r25	; 0x20
    2828:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_displayCharacter+0x5d2>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	6b a1       	ldd	r22, Y+35	; 0x23
    2840:	7c a1       	ldd	r23, Y+36	; 0x24
    2842:	8d a1       	ldd	r24, Y+37	; 0x25
    2844:	9e a1       	ldd	r25, Y+38	; 0x26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9a a3       	std	Y+34, r25	; 0x22
    2850:	89 a3       	std	Y+33, r24	; 0x21
    2852:	89 a1       	ldd	r24, Y+33	; 0x21
    2854:	9a a1       	ldd	r25, Y+34	; 0x22
    2856:	9e 8f       	std	Y+30, r25	; 0x1e
    2858:	8d 8f       	std	Y+29, r24	; 0x1d
    285a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_displayCharacter+0x61a>
    2862:	9e 8f       	std	Y+30, r25	; 0x1e
    2864:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2866:	a8 e3       	ldi	r26, 0x38	; 56
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e8 e3       	ldi	r30, 0x38	; 56
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	28 2f       	mov	r18, r24
    2872:	2f 70       	andi	r18, 0x0F	; 15
    2874:	fe 01       	movw	r30, r28
    2876:	ed 59       	subi	r30, 0x9D	; 157
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	82 95       	swap	r24
    2882:	92 95       	swap	r25
    2884:	90 7f       	andi	r25, 0xF0	; 240
    2886:	98 27       	eor	r25, r24
    2888:	80 7f       	andi	r24, 0xF0	; 240
    288a:	98 27       	eor	r25, r24
    288c:	82 2b       	or	r24, r18
    288e:	8c 93       	st	X, r24
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	a0 e8       	ldi	r26, 0x80	; 128
    2896:	bf e3       	ldi	r27, 0x3F	; 63
    2898:	89 8f       	std	Y+25, r24	; 0x19
    289a:	9a 8f       	std	Y+26, r25	; 0x1a
    289c:	ab 8f       	std	Y+27, r26	; 0x1b
    289e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	69 8d       	ldd	r22, Y+25	; 0x19
    28a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a ef       	ldi	r20, 0xFA	; 250
    28ae:	54 e4       	ldi	r21, 0x44	; 68
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8d 8b       	std	Y+21, r24	; 0x15
    28ba:	9e 8b       	std	Y+22, r25	; 0x16
    28bc:	af 8b       	std	Y+23, r26	; 0x17
    28be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9c 8b       	std	Y+20, r25	; 0x14
    28de:	8b 8b       	std	Y+19, r24	; 0x13
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	69 8d       	ldd	r22, Y+25	; 0x19
    28fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <LCD_displayCharacter+0x6fe>
    2924:	88 ec       	ldi	r24, 0xC8	; 200
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9a 8b       	std	Y+18, r25	; 0x12
    292a:	89 8b       	std	Y+17, r24	; 0x11
    292c:	89 89       	ldd	r24, Y+17	; 0x11
    292e:	9a 89       	ldd	r25, Y+18	; 0x12
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <LCD_displayCharacter+0x6ec>
    2934:	9a 8b       	std	Y+18, r25	; 0x12
    2936:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9c 8b       	std	Y+20, r25	; 0x14
    2940:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8b 89       	ldd	r24, Y+19	; 0x13
    2944:	9c 89       	ldd	r25, Y+20	; 0x14
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <LCD_displayCharacter+0x6e0>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6d 89       	ldd	r22, Y+21	; 0x15
    294e:	7e 89       	ldd	r23, Y+22	; 0x16
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	98 8d       	ldd	r25, Y+24	; 0x18
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9c 8b       	std	Y+20, r25	; 0x14
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	8b 89       	ldd	r24, Y+19	; 0x13
    2962:	9c 89       	ldd	r25, Y+20	; 0x14
    2964:	98 8b       	std	Y+16, r25	; 0x10
    2966:	8f 87       	std	Y+15, r24	; 0x0f
    2968:	8f 85       	ldd	r24, Y+15	; 0x0f
    296a:	98 89       	ldd	r25, Y+16	; 0x10
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_displayCharacter+0x728>
    2970:	98 8b       	std	Y+16, r25	; 0x10
    2972:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2974:	a2 e3       	ldi	r26, 0x32	; 50
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e2 e3       	ldi	r30, 0x32	; 50
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8f 7b       	andi	r24, 0xBF	; 191
    2980:	8c 93       	st	X, r24
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	a0 e8       	ldi	r26, 0x80	; 128
    2988:	bf e3       	ldi	r27, 0x3F	; 63
    298a:	8b 87       	std	Y+11, r24	; 0x0b
    298c:	9c 87       	std	Y+12, r25	; 0x0c
    298e:	ad 87       	std	Y+13, r26	; 0x0d
    2990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2992:	6b 85       	ldd	r22, Y+11	; 0x0b
    2994:	7c 85       	ldd	r23, Y+12	; 0x0c
    2996:	8d 85       	ldd	r24, Y+13	; 0x0d
    2998:	9e 85       	ldd	r25, Y+14	; 0x0e
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	4a ef       	ldi	r20, 0xFA	; 250
    29a0:	54 e4       	ldi	r21, 0x44	; 68
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	8f 83       	std	Y+7, r24	; 0x07
    29ac:	98 87       	std	Y+8, r25	; 0x08
    29ae:	a9 87       	std	Y+9, r26	; 0x09
    29b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e8       	ldi	r20, 0x80	; 128
    29c0:	5f e3       	ldi	r21, 0x3F	; 63
    29c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c6:	88 23       	and	r24, r24
    29c8:	2c f4       	brge	.+10     	; 0x29d4 <LCD_displayCharacter+0x790>
		__ticks = 1;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	3f c0       	rjmp	.+126    	; 0x2a52 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    29d4:	6f 81       	ldd	r22, Y+7	; 0x07
    29d6:	78 85       	ldd	r23, Y+8	; 0x08
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	3f ef       	ldi	r19, 0xFF	; 255
    29e0:	4f e7       	ldi	r20, 0x7F	; 127
    29e2:	57 e4       	ldi	r21, 0x47	; 71
    29e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	4c f5       	brge	.+82     	; 0x2a3e <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e2       	ldi	r20, 0x20	; 32
    29fa:	51 e4       	ldi	r21, 0x41	; 65
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	0f c0       	rjmp	.+30     	; 0x2a34 <LCD_displayCharacter+0x7f0>
    2a16:	88 ec       	ldi	r24, 0xC8	; 200
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_displayCharacter+0x7de>
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	69 f7       	brne	.-38     	; 0x2a16 <LCD_displayCharacter+0x7d2>
    2a3c:	14 c0       	rjmp	.+40     	; 0x2a66 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <LCD_displayCharacter+0x81a>
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a66:	cd 59       	subi	r28, 0x9D	; 157
    2a68:	df 4f       	sbci	r29, 0xFF	; 255
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <LCD_displayString+0x6>
    2a84:	0f 92       	push	r0
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9b 83       	std	Y+3, r25	; 0x03
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	0e c0       	rjmp	.+28     	; 0x2aae <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	80 81       	ld	r24, Z
    2aa4:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_displayCharacter>
		i++;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	fc 01       	movw	r30, r24
    2aba:	e2 0f       	add	r30, r18
    2abc:	f3 1f       	adc	r31, r19
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 23       	and	r24, r24
    2ac2:	39 f7       	brne	.-50     	; 0x2a92 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <LCD_goToRowColumn+0x6>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <LCD_goToRowColumn+0x8>
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	3d 83       	std	Y+5, r19	; 0x05
    2aea:	2c 83       	std	Y+4, r18	; 0x04
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	91 05       	cpc	r25, r1
    2af4:	c1 f0       	breq	.+48     	; 0x2b26 <LCD_goToRowColumn+0x56>
    2af6:	2c 81       	ldd	r18, Y+4	; 0x04
    2af8:	3d 81       	ldd	r19, Y+5	; 0x05
    2afa:	22 30       	cpi	r18, 0x02	; 2
    2afc:	31 05       	cpc	r19, r1
    2afe:	2c f4       	brge	.+10     	; 0x2b0a <LCD_goToRowColumn+0x3a>
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	9d 81       	ldd	r25, Y+5	; 0x05
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	61 f0       	breq	.+24     	; 0x2b20 <LCD_goToRowColumn+0x50>
    2b08:	19 c0       	rjmp	.+50     	; 0x2b3c <LCD_goToRowColumn+0x6c>
    2b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b0e:	22 30       	cpi	r18, 0x02	; 2
    2b10:	31 05       	cpc	r19, r1
    2b12:	69 f0       	breq	.+26     	; 0x2b2e <LCD_goToRowColumn+0x5e>
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
    2b16:	9d 81       	ldd	r25, Y+5	; 0x05
    2b18:	83 30       	cpi	r24, 0x03	; 3
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	61 f0       	breq	.+24     	; 0x2b36 <LCD_goToRowColumn+0x66>
    2b1e:	0e c0       	rjmp	.+28     	; 0x2b3c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	89 83       	std	Y+1, r24	; 0x01
    2b24:	0b c0       	rjmp	.+22     	; 0x2b3c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	80 5c       	subi	r24, 0xC0	; 192
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	80 5f       	subi	r24, 0xF0	; 240
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	03 c0       	rjmp	.+6      	; 0x2b3c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	80 5b       	subi	r24, 0xB0	; 176
    2b3a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	80 68       	ori	r24, 0x80	; 128
    2b40:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <LCD_displayStringRowColumn+0x6>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <LCD_displayStringRowColumn+0x8>
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	6a 83       	std	Y+2, r22	; 0x02
    2b64:	5c 83       	std	Y+4, r21	; 0x04
    2b66:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b6c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	62 97       	sbiw	r28, 0x12	; 18
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	9a 8b       	std	Y+18, r25	; 0x12
    2b9c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2b9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ba0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2f 5f       	subi	r18, 0xFF	; 255
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	b9 01       	movw	r22, r18
    2baa:	4a e0       	ldi	r20, 0x0A	; 10
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <itoa>
   LCD_displayString(buff);
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <LCD_displayString>
}
    2bba:	62 96       	adiw	r28, 0x12	; 18
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_sendCommand>
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2be8:	eb e2       	ldi	r30, 0x2B	; 43
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2bf0:	ea e2       	ldi	r30, 0x2A	; 42
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	88 e1       	ldi	r24, 0x18	; 24
    2bf6:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2bf8:	e0 e4       	ldi	r30, 0x40	; 64
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	86 e8       	ldi	r24, 0x86	; 134
    2bfe:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2c00:	e0 e4       	ldi	r30, 0x40	; 64
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2c06:	e9 e2       	ldi	r30, 0x29	; 41
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	87 e6       	ldi	r24, 0x67	; 103
    2c0c:	80 83       	st	Z, r24
}
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	0f 92       	push	r0
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c20:	eb e2       	ldi	r30, 0x2B	; 43
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	80 72       	andi	r24, 0x20	; 32
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	b9 f3       	breq	.-18     	; 0x2c20 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2c32:	ec e2       	ldi	r30, 0x2C	; 44
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2c3a:	0f 90       	pop	r0
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c4a:	eb e2       	ldi	r30, 0x2B	; 43
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	88 23       	and	r24, r24
    2c52:	dc f7       	brge	.-10     	; 0x2c4a <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2c54:	ec e2       	ldi	r30, 0x2C	; 44
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
}
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <UART_sendString+0x6>
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	9b 83       	std	Y+3, r25	; 0x03
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c70:	19 82       	std	Y+1, r1	; 0x01
    2c72:	0e c0       	rjmp	.+28     	; 0x2c90 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e2 0f       	add	r30, r18
    2c82:	f3 1f       	adc	r31, r19
    2c84:	80 81       	ld	r24, Z
    2c86:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_sendByte>
		i++;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e2 0f       	add	r30, r18
    2c9e:	f3 1f       	adc	r31, r19
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 23       	and	r24, r24
    2ca4:	39 f7       	brne	.-50     	; 0x2c74 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <UART_receiveString+0xa>
    2cbc:	0f 92       	push	r0
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
    2cc2:	9b 83       	std	Y+3, r25	; 0x03
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cc6:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd2:	8c 01       	movw	r16, r24
    2cd4:	02 0f       	add	r16, r18
    2cd6:	13 1f       	adc	r17, r19
    2cd8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_recieveByte>
    2cdc:	f8 01       	movw	r30, r16
    2cde:	80 83       	st	Z, r24
    2ce0:	0f c0       	rjmp	.+30     	; 0x2d00 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	8f 5f       	subi	r24, 0xFF	; 255
    2ce6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	8c 01       	movw	r16, r24
    2cf4:	02 0f       	add	r16, r18
    2cf6:	13 1f       	adc	r17, r19
    2cf8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <UART_recieveByte>
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f3 1f       	adc	r31, r19
    2d10:	80 81       	ld	r24, Z
    2d12:	83 32       	cpi	r24, 0x23	; 35
    2d14:	31 f7       	brne	.-52     	; 0x2ce2 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	fc 01       	movw	r30, r24
    2d22:	e2 0f       	add	r30, r18
    2d24:	f3 1f       	adc	r31, r19
    2d26:	10 82       	st	Z, r1
}
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	08 95       	ret

00002d38 <__prologue_saves__>:
    2d38:	2f 92       	push	r2
    2d3a:	3f 92       	push	r3
    2d3c:	4f 92       	push	r4
    2d3e:	5f 92       	push	r5
    2d40:	6f 92       	push	r6
    2d42:	7f 92       	push	r7
    2d44:	8f 92       	push	r8
    2d46:	9f 92       	push	r9
    2d48:	af 92       	push	r10
    2d4a:	bf 92       	push	r11
    2d4c:	cf 92       	push	r12
    2d4e:	df 92       	push	r13
    2d50:	ef 92       	push	r14
    2d52:	ff 92       	push	r15
    2d54:	0f 93       	push	r16
    2d56:	1f 93       	push	r17
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	ca 1b       	sub	r28, r26
    2d62:	db 0b       	sbc	r29, r27
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	09 94       	ijmp

00002d70 <__epilogue_restores__>:
    2d70:	2a 88       	ldd	r2, Y+18	; 0x12
    2d72:	39 88       	ldd	r3, Y+17	; 0x11
    2d74:	48 88       	ldd	r4, Y+16	; 0x10
    2d76:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d78:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d80:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d82:	b9 84       	ldd	r11, Y+9	; 0x09
    2d84:	c8 84       	ldd	r12, Y+8	; 0x08
    2d86:	df 80       	ldd	r13, Y+7	; 0x07
    2d88:	ee 80       	ldd	r14, Y+6	; 0x06
    2d8a:	fd 80       	ldd	r15, Y+5	; 0x05
    2d8c:	0c 81       	ldd	r16, Y+4	; 0x04
    2d8e:	1b 81       	ldd	r17, Y+3	; 0x03
    2d90:	aa 81       	ldd	r26, Y+2	; 0x02
    2d92:	b9 81       	ldd	r27, Y+1	; 0x01
    2d94:	ce 0f       	add	r28, r30
    2d96:	d1 1d       	adc	r29, r1
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	ed 01       	movw	r28, r26
    2da4:	08 95       	ret

00002da6 <itoa>:
    2da6:	fb 01       	movw	r30, r22
    2da8:	9f 01       	movw	r18, r30
    2daa:	e8 94       	clt
    2dac:	42 30       	cpi	r20, 0x02	; 2
    2dae:	c4 f0       	brlt	.+48     	; 0x2de0 <itoa+0x3a>
    2db0:	45 32       	cpi	r20, 0x25	; 37
    2db2:	b4 f4       	brge	.+44     	; 0x2de0 <itoa+0x3a>
    2db4:	4a 30       	cpi	r20, 0x0A	; 10
    2db6:	29 f4       	brne	.+10     	; 0x2dc2 <itoa+0x1c>
    2db8:	97 fb       	bst	r25, 7
    2dba:	1e f4       	brtc	.+6      	; 0x2dc2 <itoa+0x1c>
    2dbc:	90 95       	com	r25
    2dbe:	81 95       	neg	r24
    2dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc2:	64 2f       	mov	r22, r20
    2dc4:	77 27       	eor	r23, r23
    2dc6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__udivmodhi4>
    2dca:	80 5d       	subi	r24, 0xD0	; 208
    2dcc:	8a 33       	cpi	r24, 0x3A	; 58
    2dce:	0c f0       	brlt	.+2      	; 0x2dd2 <itoa+0x2c>
    2dd0:	89 5d       	subi	r24, 0xD9	; 217
    2dd2:	81 93       	st	Z+, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	a1 f7       	brne	.-24     	; 0x2dc2 <itoa+0x1c>
    2dda:	16 f4       	brtc	.+4      	; 0x2de0 <itoa+0x3a>
    2ddc:	5d e2       	ldi	r21, 0x2D	; 45
    2dde:	51 93       	st	Z+, r21
    2de0:	10 82       	st	Z, r1
    2de2:	c9 01       	movw	r24, r18
    2de4:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <strrev>

00002de8 <strrev>:
    2de8:	dc 01       	movw	r26, r24
    2dea:	fc 01       	movw	r30, r24
    2dec:	67 2f       	mov	r22, r23
    2dee:	71 91       	ld	r23, Z+
    2df0:	77 23       	and	r23, r23
    2df2:	e1 f7       	brne	.-8      	; 0x2dec <strrev+0x4>
    2df4:	32 97       	sbiw	r30, 0x02	; 2
    2df6:	04 c0       	rjmp	.+8      	; 0x2e00 <strrev+0x18>
    2df8:	7c 91       	ld	r23, X
    2dfa:	6d 93       	st	X+, r22
    2dfc:	70 83       	st	Z, r23
    2dfe:	62 91       	ld	r22, -Z
    2e00:	ae 17       	cp	r26, r30
    2e02:	bf 07       	cpc	r27, r31
    2e04:	c8 f3       	brcs	.-14     	; 0x2df8 <strrev+0x10>
    2e06:	08 95       	ret

00002e08 <__udivmodhi4>:
    2e08:	aa 1b       	sub	r26, r26
    2e0a:	bb 1b       	sub	r27, r27
    2e0c:	51 e1       	ldi	r21, 0x11	; 17
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <__udivmodhi4_ep>

00002e10 <__udivmodhi4_loop>:
    2e10:	aa 1f       	adc	r26, r26
    2e12:	bb 1f       	adc	r27, r27
    2e14:	a6 17       	cp	r26, r22
    2e16:	b7 07       	cpc	r27, r23
    2e18:	10 f0       	brcs	.+4      	; 0x2e1e <__udivmodhi4_ep>
    2e1a:	a6 1b       	sub	r26, r22
    2e1c:	b7 0b       	sbc	r27, r23

00002e1e <__udivmodhi4_ep>:
    2e1e:	88 1f       	adc	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	5a 95       	dec	r21
    2e24:	a9 f7       	brne	.-22     	; 0x2e10 <__udivmodhi4_loop>
    2e26:	80 95       	com	r24
    2e28:	90 95       	com	r25
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	08 95       	ret

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>
